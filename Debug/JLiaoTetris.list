
JLiaoTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001250  08006078  08006078  00007078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c8  080072c8  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d0  080072d0  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d4  080072d4  000082d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080072d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091dc  2**0
                  CONTENTS
 10 .bss          00025b80  200001dc  200001dc  000091dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d5c  20025d5c  000091dc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e425  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cdf  00000000  00000000  0001762b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  0001a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ada  00000000  00000000  0001b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002627b  00000000  00000000  0001bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146e0  00000000  00000000  00041ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d84a7  00000000  00000000  000565a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ea4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d4  00000000  00000000  0012ea90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00132464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001dc 	.word	0x200001dc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006060 	.word	0x08006060

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001e0 	.word	0x200001e0
 80001e8:	08006060 	.word	0x08006060

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    LTCD__Init();
 80004e0:	f000 fce0 	bl	8000ea4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fc9d 	bl	8000e24 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fd52 	bl	8000f98 <LCD_Clear>
    RNG_Init();
 80004f4:	f000 fee4 	bl	80012c0 <RNG_Init>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f8:	f000 feca 	bl	8001290 <InitializeLCDTouch>
	BTN_Initalize();
 80004fc:	f000 f824 	bl	8000548 <BTN_Initalize>
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <ApplicationInit+0x30>)
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200001f8 	.word	0x200001f8

08000510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	db0b      	blt.n	800053a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 021f 	and.w	r2, r3, #31
 8000528:	4906      	ldr	r1, [pc, #24]	@ (8000544 <__NVIC_EnableIRQ+0x34>)
 800052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	2001      	movs	r0, #1
 8000532:	fa00 f202 	lsl.w	r2, r0, r2
 8000536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	e000e100 	.word	0xe000e100

08000548 <BTN_Initalize>:
#include "Button_Driver.h"

GPIO_InitTypeDef BtnConfig = {0}; // Define a global variable for the GPIO handle configuration

// Initialize the button
void BTN_Initalize() {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    BtnConfig.Pin = BTN_PIN; // Set pin number for the button
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <BTN_Initalize+0x28>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
    BtnConfig.Mode = GPIO_MODE_INPUT; // Set pin mode as input
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <BTN_Initalize+0x28>)
 8000554:	2200      	movs	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
    BTN_ClockEnable(); // Enable clock for the button GPIO port
 8000558:	f000 f80e 	bl	8000578 <BTN_ClockEnable>
    __NVIC_EnableIRQ(EXTI0_IRQn); // Enable interrupt for EXTI0
 800055c:	2006      	movs	r0, #6
 800055e:	f7ff ffd7 	bl	8000510 <__NVIC_EnableIRQ>
    HAL_GPIO_Init(BTN_PORT, &BtnConfig); // Initialize GPIO configuration for the button
 8000562:	4903      	ldr	r1, [pc, #12]	@ (8000570 <BTN_Initalize+0x28>)
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <BTN_Initalize+0x2c>)
 8000566:	f002 fda1 	bl	80030ac <HAL_GPIO_Init>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000200 	.word	0x20000200
 8000574:	40020000 	.word	0x40020000

08000578 <BTN_ClockEnable>:

// Enable clock for the button
void BTN_ClockEnable() {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clock for GPIO port A
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <BTN_ClockEnable+0x2c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a07      	ldr	r2, [pc, #28]	@ (80005a4 <BTN_ClockEnable+0x2c>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <BTN_ClockEnable+0x2c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40023800 	.word	0x40023800

080005a8 <BTN_Pressed>:

// Check if the button is pressed
bool BTN_Pressed() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    uint8_t check = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN); // Read the state of the button pin
 80005ae:	2101      	movs	r1, #1
 80005b0:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <BTN_Pressed+0x28>)
 80005b2:	f003 f82f 	bl	8003614 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    if (check == BTN_PRESSED) { // If the button is pressed, return true
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <BTN_Pressed+0x1c>
        return true;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <BTN_Pressed+0x1e>
    } else { // Otherwise, return false
        return false;
 80005c4:	2300      	movs	r3, #0
    }
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000

080005d4 <DisplayString>:

// Variable to hold touch screen data
static STMPE811_TouchData StaticTouchData;

// Displays a string on the LCD screen at specified coordinates
void DisplayString(uint16_t x, uint16_t y, char *str) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	603a      	str	r2, [r7, #0]
 80005de:	80fb      	strh	r3, [r7, #6]
 80005e0:	460b      	mov	r3, r1
 80005e2:	80bb      	strh	r3, [r7, #4]
    while(*str) {
 80005e4:	e00d      	b.n	8000602 <DisplayString+0x2e>
        LCD_DisplayChar(x, y, *str++);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	603a      	str	r2, [r7, #0]
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	88b9      	ldrh	r1, [r7, #4]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd7e 	bl	80010f4 <LCD_DisplayChar>
        x += Font16x24.Width;  // Move x coordinate by character width for next character
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <DisplayString+0x40>)
 80005fa:	889a      	ldrh	r2, [r3, #4]
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	4413      	add	r3, r2
 8000600:	80fb      	strh	r3, [r7, #6]
    while(*str) {
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1ed      	bne.n	80005e6 <DisplayString+0x12>
    }
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200001c4 	.word	0x200001c4

08000618 <Game_Select>:

// Function to select game mode by touching screen regions
bool Game_Select(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af02      	add	r7, sp, #8
	LCD_Clear(0,LCD_COLOR_WHITE);  // Clear the LCD display
 800061e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fcb8 	bl	8000f98 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);  // Set text color to black
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fcd7 	bl	8000fdc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);  // Set font size
 800062e:	489d      	ldr	r0, [pc, #628]	@ (80008a4 <Game_Select+0x28c>)
 8000630:	f000 fce4 	bl	8000ffc <LCD_SetFont>

	// Print out all 7 blocks
	// I block
	LCD_Draw_Rectangle_Fill(1*15,1*15,15,15,COLOR_CYAN);
 8000634:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	230f      	movs	r3, #15
 800063c:	220f      	movs	r2, #15
 800063e:	210f      	movs	r1, #15
 8000640:	200f      	movs	r0, #15
 8000642:	f000 fdf8 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,2*15,15,15,COLOR_CYAN);
 8000646:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	230f      	movs	r3, #15
 800064e:	220f      	movs	r2, #15
 8000650:	211e      	movs	r1, #30
 8000652:	200f      	movs	r0, #15
 8000654:	f000 fdef 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,3*15,15,15,COLOR_CYAN);
 8000658:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	230f      	movs	r3, #15
 8000660:	220f      	movs	r2, #15
 8000662:	212d      	movs	r1, #45	@ 0x2d
 8000664:	200f      	movs	r0, #15
 8000666:	f000 fde6 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,4*15,15,15,COLOR_CYAN);
 800066a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	230f      	movs	r3, #15
 8000672:	220f      	movs	r2, #15
 8000674:	213c      	movs	r1, #60	@ 0x3c
 8000676:	200f      	movs	r0, #15
 8000678:	f000 fddd 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// J block
	LCD_Draw_Rectangle_Fill(2*15,6*15,15,15,COLOR_BLUE);
 800067c:	231f      	movs	r3, #31
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	230f      	movs	r3, #15
 8000682:	220f      	movs	r2, #15
 8000684:	215a      	movs	r1, #90	@ 0x5a
 8000686:	201e      	movs	r0, #30
 8000688:	f000 fdd5 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(2*15,7*15,15,15,COLOR_BLUE);
 800068c:	231f      	movs	r3, #31
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	230f      	movs	r3, #15
 8000692:	220f      	movs	r2, #15
 8000694:	2169      	movs	r1, #105	@ 0x69
 8000696:	201e      	movs	r0, #30
 8000698:	f000 fdcd 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(3*15,7*15,15,15,COLOR_BLUE);
 800069c:	231f      	movs	r3, #31
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	230f      	movs	r3, #15
 80006a2:	220f      	movs	r2, #15
 80006a4:	2169      	movs	r1, #105	@ 0x69
 80006a6:	202d      	movs	r0, #45	@ 0x2d
 80006a8:	f000 fdc5 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(4*15,7*15,15,15,COLOR_BLUE);
 80006ac:	231f      	movs	r3, #31
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	230f      	movs	r3, #15
 80006b2:	220f      	movs	r2, #15
 80006b4:	2169      	movs	r1, #105	@ 0x69
 80006b6:	203c      	movs	r0, #60	@ 0x3c
 80006b8:	f000 fdbd 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// L block
	LCD_Draw_Rectangle_Fill(7*15,10*15,15,15,COLOR_ORANGE);
 80006bc:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	230f      	movs	r3, #15
 80006c4:	220f      	movs	r2, #15
 80006c6:	2196      	movs	r1, #150	@ 0x96
 80006c8:	2069      	movs	r0, #105	@ 0x69
 80006ca:	f000 fdb4 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(8*15,10*15,15,15,COLOR_ORANGE);
 80006ce:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	230f      	movs	r3, #15
 80006d6:	220f      	movs	r2, #15
 80006d8:	2196      	movs	r1, #150	@ 0x96
 80006da:	2078      	movs	r0, #120	@ 0x78
 80006dc:	f000 fdab 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,10*15,15,15,COLOR_ORANGE);
 80006e0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	230f      	movs	r3, #15
 80006e8:	220f      	movs	r2, #15
 80006ea:	2196      	movs	r1, #150	@ 0x96
 80006ec:	2087      	movs	r0, #135	@ 0x87
 80006ee:	f000 fda2 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,9*15,15,15,COLOR_ORANGE);
 80006f2:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	230f      	movs	r3, #15
 80006fa:	220f      	movs	r2, #15
 80006fc:	2187      	movs	r1, #135	@ 0x87
 80006fe:	2087      	movs	r0, #135	@ 0x87
 8000700:	f000 fd99 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// O block
	LCD_Draw_Rectangle_Fill(8*15,18*15,15,15,COLOR_YELLOW);
 8000704:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	230f      	movs	r3, #15
 800070c:	220f      	movs	r2, #15
 800070e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fd8f 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(8*15,19*15,15,15,COLOR_YELLOW);
 8000718:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	230f      	movs	r3, #15
 8000720:	220f      	movs	r2, #15
 8000722:	f240 111d 	movw	r1, #285	@ 0x11d
 8000726:	2078      	movs	r0, #120	@ 0x78
 8000728:	f000 fd85 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,18*15,15,15,COLOR_YELLOW);
 800072c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	230f      	movs	r3, #15
 8000734:	220f      	movs	r2, #15
 8000736:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800073a:	2087      	movs	r0, #135	@ 0x87
 800073c:	f000 fd7b 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,19*15,15,15,COLOR_YELLOW);
 8000740:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	230f      	movs	r3, #15
 8000748:	220f      	movs	r2, #15
 800074a:	f240 111d 	movw	r1, #285	@ 0x11d
 800074e:	2087      	movs	r0, #135	@ 0x87
 8000750:	f000 fd71 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// S block
	LCD_Draw_Rectangle_Fill(0*15,19*15,15,15,COLOR_GREEN);
 8000754:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	230f      	movs	r3, #15
 800075c:	220f      	movs	r2, #15
 800075e:	f240 111d 	movw	r1, #285	@ 0x11d
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fd67 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,19*15,15,15,COLOR_GREEN);
 8000768:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	230f      	movs	r3, #15
 8000770:	220f      	movs	r2, #15
 8000772:	f240 111d 	movw	r1, #285	@ 0x11d
 8000776:	200f      	movs	r0, #15
 8000778:	f000 fd5d 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,18*15,15,15,COLOR_GREEN);
 800077c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	230f      	movs	r3, #15
 8000784:	220f      	movs	r2, #15
 8000786:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800078a:	200f      	movs	r0, #15
 800078c:	f000 fd53 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(2*15,18*15,15,15,COLOR_GREEN);
 8000790:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	230f      	movs	r3, #15
 8000798:	220f      	movs	r2, #15
 800079a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800079e:	201e      	movs	r0, #30
 80007a0:	f000 fd49 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// Z block
	LCD_Draw_Rectangle_Fill(4*15,9*15,15,15,COLOR_RED);
 80007a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	230f      	movs	r3, #15
 80007ac:	220f      	movs	r2, #15
 80007ae:	2187      	movs	r1, #135	@ 0x87
 80007b0:	203c      	movs	r0, #60	@ 0x3c
 80007b2:	f000 fd40 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(4*15,10*15,15,15,COLOR_RED);
 80007b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	230f      	movs	r3, #15
 80007be:	220f      	movs	r2, #15
 80007c0:	2196      	movs	r1, #150	@ 0x96
 80007c2:	203c      	movs	r0, #60	@ 0x3c
 80007c4:	f000 fd37 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(5*15,10*15,15,15,COLOR_RED);
 80007c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	230f      	movs	r3, #15
 80007d0:	220f      	movs	r2, #15
 80007d2:	2196      	movs	r1, #150	@ 0x96
 80007d4:	204b      	movs	r0, #75	@ 0x4b
 80007d6:	f000 fd2e 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(5*15,11*15,15,15,COLOR_RED);
 80007da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	230f      	movs	r3, #15
 80007e2:	220f      	movs	r2, #15
 80007e4:	21a5      	movs	r1, #165	@ 0xa5
 80007e6:	204b      	movs	r0, #75	@ 0x4b
 80007e8:	f000 fd25 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// T block
	LCD_Draw_Rectangle_Fill(7*15,3*15,15,15,COLOR_PURPLE);
 80007ec:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	230f      	movs	r3, #15
 80007f4:	220f      	movs	r2, #15
 80007f6:	212d      	movs	r1, #45	@ 0x2d
 80007f8:	2069      	movs	r0, #105	@ 0x69
 80007fa:	f000 fd1c 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(8*15,4*15,15,15,COLOR_PURPLE);
 80007fe:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	230f      	movs	r3, #15
 8000806:	220f      	movs	r2, #15
 8000808:	213c      	movs	r1, #60	@ 0x3c
 800080a:	2078      	movs	r0, #120	@ 0x78
 800080c:	f000 fd13 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(7*15,4*15,15,15,COLOR_PURPLE);
 8000810:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	230f      	movs	r3, #15
 8000818:	220f      	movs	r2, #15
 800081a:	213c      	movs	r1, #60	@ 0x3c
 800081c:	2069      	movs	r0, #105	@ 0x69
 800081e:	f000 fd0a 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(6*15,4*15,15,15,COLOR_PURPLE);
 8000822:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	230f      	movs	r3, #15
 800082a:	220f      	movs	r2, #15
 800082c:	213c      	movs	r1, #60	@ 0x3c
 800082e:	205a      	movs	r0, #90	@ 0x5a
 8000830:	f000 fd01 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// Display back ground
	LCD_Draw_Tetris_Grid();
 8000834:	f000 fc80 	bl	8001138 <LCD_Draw_Tetris_Grid>
	// Display game title
	DisplayString(30, 20, "Tetris");
 8000838:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <Game_Select+0x290>)
 800083a:	2114      	movs	r1, #20
 800083c:	201e      	movs	r0, #30
 800083e:	f7ff fec9 	bl	80005d4 <DisplayString>

	// Draw button and label for START
	LCD_Draw_Rectangle_Fill(30, 200, 100, 70, LCD_COLOR_BLACK);
 8000842:	2300      	movs	r3, #0
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2346      	movs	r3, #70	@ 0x46
 8000848:	2264      	movs	r2, #100	@ 0x64
 800084a:	21c8      	movs	r1, #200	@ 0xc8
 800084c:	201e      	movs	r0, #30
 800084e:	f000 fcf2 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000852:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000856:	f000 fbc1 	bl	8000fdc <LCD_SetTextColor>
	DisplayString(40, 225, "START");
 800085a:	4a14      	ldr	r2, [pc, #80]	@ (80008ac <Game_Select+0x294>)
 800085c:	21e1      	movs	r1, #225	@ 0xe1
 800085e:	2028      	movs	r0, #40	@ 0x28
 8000860:	f7ff feb8 	bl	80005d4 <DisplayString>


    while (1) {
        if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000864:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <Game_Select+0x298>)
 8000866:	f000 fd1e 	bl	80012a6 <returnTouchStateAndLocation>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f9      	bne.n	8000864 <Game_Select+0x24c>
            // Check touch coordinates for button presses
            if (StaticTouchData.x >= 100 && StaticTouchData.x <= 200) { // Horizontal bounds
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <Game_Select+0x298>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	2b63      	cmp	r3, #99	@ 0x63
 8000876:	d9f5      	bls.n	8000864 <Game_Select+0x24c>
 8000878:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <Game_Select+0x298>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2bc8      	cmp	r3, #200	@ 0xc8
 800087e:	d8f1      	bhi.n	8000864 <Game_Select+0x24c>
                // START
                if (StaticTouchData.y >= 200 && StaticTouchData.y <= 270) {
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <Game_Select+0x298>)
 8000882:	885b      	ldrh	r3, [r3, #2]
 8000884:	2bc7      	cmp	r3, #199	@ 0xc7
 8000886:	d9ed      	bls.n	8000864 <Game_Select+0x24c>
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <Game_Select+0x298>)
 800088a:	885b      	ldrh	r3, [r3, #2]
 800088c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000890:	d8e8      	bhi.n	8000864 <Game_Select+0x24c>
                    LCD_Clear(0, LCD_COLOR_WHITE);
 8000892:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fb7e 	bl	8000f98 <LCD_Clear>
                    return true;  // Return true for START
 800089c:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001c4 	.word	0x200001c4
 80008a8:	08006078 	.word	0x08006078
 80008ac:	08006080 	.word	0x08006080
 80008b0:	20000214 	.word	0x20000214

080008b4 <Game_Select_2>:
bool Game_Select_2(int score, int playtime, int single, int doubles, int triple, int tetris, int PB){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	603b      	str	r3, [r7, #0]
	LCD_Clear(0,LCD_COLOR_WHITE);  // Clear the LCD display
 80008c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fb66 	bl	8000f98 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);  // Set text color to black
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fb85 	bl	8000fdc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);  // Set font size
 80008d2:	48df      	ldr	r0, [pc, #892]	@ (8000c50 <Game_Select_2+0x39c>)
 80008d4:	f000 fb92 	bl	8000ffc <LCD_SetFont>

	// Print out all 7 blocks
	// I block
	LCD_Draw_Rectangle_Fill(1*15,1*15,15,15,COLOR_CYAN);
 80008d8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	230f      	movs	r3, #15
 80008e0:	220f      	movs	r2, #15
 80008e2:	210f      	movs	r1, #15
 80008e4:	200f      	movs	r0, #15
 80008e6:	f000 fca6 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,2*15,15,15,COLOR_CYAN);
 80008ea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	230f      	movs	r3, #15
 80008f2:	220f      	movs	r2, #15
 80008f4:	211e      	movs	r1, #30
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 fc9d 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,3*15,15,15,COLOR_CYAN);
 80008fc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	230f      	movs	r3, #15
 8000904:	220f      	movs	r2, #15
 8000906:	212d      	movs	r1, #45	@ 0x2d
 8000908:	200f      	movs	r0, #15
 800090a:	f000 fc94 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,4*15,15,15,COLOR_CYAN);
 800090e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	230f      	movs	r3, #15
 8000916:	220f      	movs	r2, #15
 8000918:	213c      	movs	r1, #60	@ 0x3c
 800091a:	200f      	movs	r0, #15
 800091c:	f000 fc8b 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// J block
	LCD_Draw_Rectangle_Fill(2*15,6*15,15,15,COLOR_BLUE);
 8000920:	231f      	movs	r3, #31
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	230f      	movs	r3, #15
 8000926:	220f      	movs	r2, #15
 8000928:	215a      	movs	r1, #90	@ 0x5a
 800092a:	201e      	movs	r0, #30
 800092c:	f000 fc83 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(2*15,7*15,15,15,COLOR_BLUE);
 8000930:	231f      	movs	r3, #31
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	230f      	movs	r3, #15
 8000936:	220f      	movs	r2, #15
 8000938:	2169      	movs	r1, #105	@ 0x69
 800093a:	201e      	movs	r0, #30
 800093c:	f000 fc7b 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(3*15,7*15,15,15,COLOR_BLUE);
 8000940:	231f      	movs	r3, #31
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	230f      	movs	r3, #15
 8000946:	220f      	movs	r2, #15
 8000948:	2169      	movs	r1, #105	@ 0x69
 800094a:	202d      	movs	r0, #45	@ 0x2d
 800094c:	f000 fc73 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(4*15,7*15,15,15,COLOR_BLUE);
 8000950:	231f      	movs	r3, #31
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	230f      	movs	r3, #15
 8000956:	220f      	movs	r2, #15
 8000958:	2169      	movs	r1, #105	@ 0x69
 800095a:	203c      	movs	r0, #60	@ 0x3c
 800095c:	f000 fc6b 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// L block
	LCD_Draw_Rectangle_Fill(7*15,10*15,15,15,COLOR_ORANGE);
 8000960:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	230f      	movs	r3, #15
 8000968:	220f      	movs	r2, #15
 800096a:	2196      	movs	r1, #150	@ 0x96
 800096c:	2069      	movs	r0, #105	@ 0x69
 800096e:	f000 fc62 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(8*15,10*15,15,15,COLOR_ORANGE);
 8000972:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	230f      	movs	r3, #15
 800097a:	220f      	movs	r2, #15
 800097c:	2196      	movs	r1, #150	@ 0x96
 800097e:	2078      	movs	r0, #120	@ 0x78
 8000980:	f000 fc59 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,10*15,15,15,COLOR_ORANGE);
 8000984:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	230f      	movs	r3, #15
 800098c:	220f      	movs	r2, #15
 800098e:	2196      	movs	r1, #150	@ 0x96
 8000990:	2087      	movs	r0, #135	@ 0x87
 8000992:	f000 fc50 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,9*15,15,15,COLOR_ORANGE);
 8000996:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	230f      	movs	r3, #15
 800099e:	220f      	movs	r2, #15
 80009a0:	2187      	movs	r1, #135	@ 0x87
 80009a2:	2087      	movs	r0, #135	@ 0x87
 80009a4:	f000 fc47 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// O block
	LCD_Draw_Rectangle_Fill(8*15,18*15,15,15,COLOR_YELLOW);
 80009a8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	230f      	movs	r3, #15
 80009b0:	220f      	movs	r2, #15
 80009b2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80009b6:	2078      	movs	r0, #120	@ 0x78
 80009b8:	f000 fc3d 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(8*15,19*15,15,15,COLOR_YELLOW);
 80009bc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	230f      	movs	r3, #15
 80009c4:	220f      	movs	r2, #15
 80009c6:	f240 111d 	movw	r1, #285	@ 0x11d
 80009ca:	2078      	movs	r0, #120	@ 0x78
 80009cc:	f000 fc33 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,18*15,15,15,COLOR_YELLOW);
 80009d0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	230f      	movs	r3, #15
 80009d8:	220f      	movs	r2, #15
 80009da:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80009de:	2087      	movs	r0, #135	@ 0x87
 80009e0:	f000 fc29 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(9*15,19*15,15,15,COLOR_YELLOW);
 80009e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	230f      	movs	r3, #15
 80009ec:	220f      	movs	r2, #15
 80009ee:	f240 111d 	movw	r1, #285	@ 0x11d
 80009f2:	2087      	movs	r0, #135	@ 0x87
 80009f4:	f000 fc1f 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// S block
	LCD_Draw_Rectangle_Fill(0*15,19*15,15,15,COLOR_GREEN);
 80009f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	230f      	movs	r3, #15
 8000a00:	220f      	movs	r2, #15
 8000a02:	f240 111d 	movw	r1, #285	@ 0x11d
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fc15 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,19*15,15,15,COLOR_GREEN);
 8000a0c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	230f      	movs	r3, #15
 8000a14:	220f      	movs	r2, #15
 8000a16:	f240 111d 	movw	r1, #285	@ 0x11d
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 fc0b 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(1*15,18*15,15,15,COLOR_GREEN);
 8000a20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	230f      	movs	r3, #15
 8000a28:	220f      	movs	r2, #15
 8000a2a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 fc01 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(2*15,18*15,15,15,COLOR_GREEN);
 8000a34:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000a42:	201e      	movs	r0, #30
 8000a44:	f000 fbf7 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// Z block
	LCD_Draw_Rectangle_Fill(4*15,9*15,15,15,COLOR_RED);
 8000a48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	230f      	movs	r3, #15
 8000a50:	220f      	movs	r2, #15
 8000a52:	2187      	movs	r1, #135	@ 0x87
 8000a54:	203c      	movs	r0, #60	@ 0x3c
 8000a56:	f000 fbee 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(4*15,10*15,15,15,COLOR_RED);
 8000a5a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	230f      	movs	r3, #15
 8000a62:	220f      	movs	r2, #15
 8000a64:	2196      	movs	r1, #150	@ 0x96
 8000a66:	203c      	movs	r0, #60	@ 0x3c
 8000a68:	f000 fbe5 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(5*15,10*15,15,15,COLOR_RED);
 8000a6c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	230f      	movs	r3, #15
 8000a74:	220f      	movs	r2, #15
 8000a76:	2196      	movs	r1, #150	@ 0x96
 8000a78:	204b      	movs	r0, #75	@ 0x4b
 8000a7a:	f000 fbdc 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(5*15,11*15,15,15,COLOR_RED);
 8000a7e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	230f      	movs	r3, #15
 8000a86:	220f      	movs	r2, #15
 8000a88:	21a5      	movs	r1, #165	@ 0xa5
 8000a8a:	204b      	movs	r0, #75	@ 0x4b
 8000a8c:	f000 fbd3 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// T block
	LCD_Draw_Rectangle_Fill(7*15,3*15,15,15,COLOR_PURPLE);
 8000a90:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	230f      	movs	r3, #15
 8000a98:	220f      	movs	r2, #15
 8000a9a:	212d      	movs	r1, #45	@ 0x2d
 8000a9c:	2069      	movs	r0, #105	@ 0x69
 8000a9e:	f000 fbca 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(8*15,4*15,15,15,COLOR_PURPLE);
 8000aa2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	220f      	movs	r2, #15
 8000aac:	213c      	movs	r1, #60	@ 0x3c
 8000aae:	2078      	movs	r0, #120	@ 0x78
 8000ab0:	f000 fbc1 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(7*15,4*15,15,15,COLOR_PURPLE);
 8000ab4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	230f      	movs	r3, #15
 8000abc:	220f      	movs	r2, #15
 8000abe:	213c      	movs	r1, #60	@ 0x3c
 8000ac0:	2069      	movs	r0, #105	@ 0x69
 8000ac2:	f000 fbb8 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(6*15,4*15,15,15,COLOR_PURPLE);
 8000ac6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	230f      	movs	r3, #15
 8000ace:	220f      	movs	r2, #15
 8000ad0:	213c      	movs	r1, #60	@ 0x3c
 8000ad2:	205a      	movs	r0, #90	@ 0x5a
 8000ad4:	f000 fbaf 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	// Display back ground
	LCD_Draw_Tetris_Grid();
 8000ad8:	f000 fb2e 	bl	8001138 <LCD_Draw_Tetris_Grid>
	// Display game title
	DisplayString(30, 20, "Tetris");
 8000adc:	4a5d      	ldr	r2, [pc, #372]	@ (8000c54 <Game_Select_2+0x3a0>)
 8000ade:	2114      	movs	r1, #20
 8000ae0:	201e      	movs	r0, #30
 8000ae2:	f7ff fd77 	bl	80005d4 <DisplayString>

	// Draw button and label for START
	LCD_Draw_Rectangle_Fill(30, 200, 100, 70, LCD_COLOR_BLACK);
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2346      	movs	r3, #70	@ 0x46
 8000aec:	2264      	movs	r2, #100	@ 0x64
 8000aee:	21c8      	movs	r1, #200	@ 0xc8
 8000af0:	201e      	movs	r0, #30
 8000af2:	f000 fba0 	bl	8001236 <LCD_Draw_Rectangle_Fill>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000af6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000afa:	f000 fa6f 	bl	8000fdc <LCD_SetTextColor>
	DisplayString(40, 225, "START");
 8000afe:	4a56      	ldr	r2, [pc, #344]	@ (8000c58 <Game_Select_2+0x3a4>)
 8000b00:	21e1      	movs	r1, #225	@ 0xe1
 8000b02:	2028      	movs	r0, #40	@ 0x28
 8000b04:	f7ff fd66 	bl	80005d4 <DisplayString>


	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 fa67 	bl	8000fdc <LCD_SetTextColor>
	DisplayString(155, 10, "SCORE");
 8000b0e:	4a53      	ldr	r2, [pc, #332]	@ (8000c5c <Game_Select_2+0x3a8>)
 8000b10:	210a      	movs	r1, #10
 8000b12:	209b      	movs	r0, #155	@ 0x9b
 8000b14:	f7ff fd5e 	bl	80005d4 <DisplayString>
	char formatted[6];
	itoa(score, &formatted, 10);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	220a      	movs	r2, #10
 8000b1e:	4619      	mov	r1, r3
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f005 fa2d 	bl	8005f80 <itoa>
	DisplayString(170, 50, formatted);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2132      	movs	r1, #50	@ 0x32
 8000b2e:	20aa      	movs	r0, #170	@ 0xaa
 8000b30:	f7ff fd50 	bl	80005d4 <DisplayString>
	DisplayString(180, 70, "PB");
 8000b34:	4a4a      	ldr	r2, [pc, #296]	@ (8000c60 <Game_Select_2+0x3ac>)
 8000b36:	2146      	movs	r1, #70	@ 0x46
 8000b38:	20b4      	movs	r0, #180	@ 0xb4
 8000b3a:	f7ff fd4b 	bl	80005d4 <DisplayString>
	itoa(PB, &formatted, 10);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	220a      	movs	r2, #10
 8000b44:	4619      	mov	r1, r3
 8000b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b48:	f005 fa1a 	bl	8005f80 <itoa>
	DisplayString(170, 100, formatted);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	461a      	mov	r2, r3
 8000b52:	2164      	movs	r1, #100	@ 0x64
 8000b54:	20aa      	movs	r0, #170	@ 0xaa
 8000b56:	f7ff fd3d 	bl	80005d4 <DisplayString>

	DisplayString(165, 150, "Time");
 8000b5a:	4a42      	ldr	r2, [pc, #264]	@ (8000c64 <Game_Select_2+0x3b0>)
 8000b5c:	2196      	movs	r1, #150	@ 0x96
 8000b5e:	20a5      	movs	r0, #165	@ 0xa5
 8000b60:	f7ff fd38 	bl	80005d4 <DisplayString>
	itoa(playtime, &formatted, 10);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	220a      	movs	r2, #10
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f005 fa07 	bl	8005f80 <itoa>
	DisplayString(170, 170, formatted);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	461a      	mov	r2, r3
 8000b78:	21aa      	movs	r1, #170	@ 0xaa
 8000b7a:	20aa      	movs	r0, #170	@ 0xaa
 8000b7c:	f7ff fd2a 	bl	80005d4 <DisplayString>

	DisplayString(155, 230, "1X");
 8000b80:	4a39      	ldr	r2, [pc, #228]	@ (8000c68 <Game_Select_2+0x3b4>)
 8000b82:	21e6      	movs	r1, #230	@ 0xe6
 8000b84:	209b      	movs	r0, #155	@ 0x9b
 8000b86:	f7ff fd25 	bl	80005d4 <DisplayString>
	DisplayString(155, 250, "2X");
 8000b8a:	4a38      	ldr	r2, [pc, #224]	@ (8000c6c <Game_Select_2+0x3b8>)
 8000b8c:	21fa      	movs	r1, #250	@ 0xfa
 8000b8e:	209b      	movs	r0, #155	@ 0x9b
 8000b90:	f7ff fd20 	bl	80005d4 <DisplayString>
	DisplayString(155, 270, "3X");
 8000b94:	4a36      	ldr	r2, [pc, #216]	@ (8000c70 <Game_Select_2+0x3bc>)
 8000b96:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000b9a:	209b      	movs	r0, #155	@ 0x9b
 8000b9c:	f7ff fd1a 	bl	80005d4 <DisplayString>
	DisplayString(155, 290, "4X");
 8000ba0:	4a34      	ldr	r2, [pc, #208]	@ (8000c74 <Game_Select_2+0x3c0>)
 8000ba2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000ba6:	209b      	movs	r0, #155	@ 0x9b
 8000ba8:	f7ff fd14 	bl	80005d4 <DisplayString>
	itoa(single, &formatted, 10);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f005 f9e3 	bl	8005f80 <itoa>
	DisplayString(195, 230, formatted);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	21e6      	movs	r1, #230	@ 0xe6
 8000bc2:	20c3      	movs	r0, #195	@ 0xc3
 8000bc4:	f7ff fd06 	bl	80005d4 <DisplayString>
	itoa(doubles, &formatted, 10);
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	220a      	movs	r2, #10
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6838      	ldr	r0, [r7, #0]
 8000bd2:	f005 f9d5 	bl	8005f80 <itoa>
	DisplayString(195, 250, formatted);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	461a      	mov	r2, r3
 8000bdc:	21fa      	movs	r1, #250	@ 0xfa
 8000bde:	20c3      	movs	r0, #195	@ 0xc3
 8000be0:	f7ff fcf8 	bl	80005d4 <DisplayString>
	itoa(triple, &formatted, 10);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	220a      	movs	r2, #10
 8000bea:	4619      	mov	r1, r3
 8000bec:	6a38      	ldr	r0, [r7, #32]
 8000bee:	f005 f9c7 	bl	8005f80 <itoa>
	DisplayString(195, 270, formatted);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000bfc:	20c3      	movs	r0, #195	@ 0xc3
 8000bfe:	f7ff fce9 	bl	80005d4 <DisplayString>
	itoa(tetris, &formatted, 10);
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	220a      	movs	r2, #10
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c0c:	f005 f9b8 	bl	8005f80 <itoa>
	DisplayString(195, 290, formatted);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	461a      	mov	r2, r3
 8000c16:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000c1a:	20c3      	movs	r0, #195	@ 0xc3
 8000c1c:	f7ff fcda 	bl	80005d4 <DisplayString>
	while (1) {
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000c20:	4815      	ldr	r0, [pc, #84]	@ (8000c78 <Game_Select_2+0x3c4>)
 8000c22:	f000 fb40 	bl	80012a6 <returnTouchStateAndLocation>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f9      	bne.n	8000c20 <Game_Select_2+0x36c>
			// Check touch coordinates for button presses
			if (StaticTouchData.x >= 100 && StaticTouchData.x <= 200) { // Horizontal bounds
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <Game_Select_2+0x3c4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	2b63      	cmp	r3, #99	@ 0x63
 8000c32:	d9f5      	bls.n	8000c20 <Game_Select_2+0x36c>
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <Game_Select_2+0x3c4>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c3a:	d8f1      	bhi.n	8000c20 <Game_Select_2+0x36c>
				// START
				if (StaticTouchData.y >= 200 && StaticTouchData.y <= 270) {
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <Game_Select_2+0x3c4>)
 8000c3e:	885b      	ldrh	r3, [r3, #2]
 8000c40:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c42:	d9ed      	bls.n	8000c20 <Game_Select_2+0x36c>
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <Game_Select_2+0x3c4>)
 8000c46:	885b      	ldrh	r3, [r3, #2]
 8000c48:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000c4c:	e016      	b.n	8000c7c <Game_Select_2+0x3c8>
 8000c4e:	bf00      	nop
 8000c50:	200001c4 	.word	0x200001c4
 8000c54:	08006078 	.word	0x08006078
 8000c58:	08006080 	.word	0x08006080
 8000c5c:	08006088 	.word	0x08006088
 8000c60:	08006090 	.word	0x08006090
 8000c64:	08006094 	.word	0x08006094
 8000c68:	0800609c 	.word	0x0800609c
 8000c6c:	080060a0 	.word	0x080060a0
 8000c70:	080060a4 	.word	0x080060a4
 8000c74:	080060a8 	.word	0x080060a8
 8000c78:	20000214 	.word	0x20000214
 8000c7c:	d8d0      	bhi.n	8000c20 <Game_Select_2+0x36c>
					LCD_Clear(0, LCD_COLOR_WHITE);
 8000c7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f988 	bl	8000f98 <LCD_Clear>
					return true;  // Return true for START
 8000c88:	2301      	movs	r3, #1
				}
			}
		}
	}
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop

08000c94 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a59      	ldr	r2, [pc, #356]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b57      	ldr	r3, [pc, #348]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	4b53      	ldr	r3, [pc, #332]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a52      	ldr	r2, [pc, #328]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b50      	ldr	r3, [pc, #320]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a4b      	ldr	r2, [pc, #300]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b49      	ldr	r3, [pc, #292]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b45      	ldr	r3, [pc, #276]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a44      	ldr	r2, [pc, #272]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b42      	ldr	r3, [pc, #264]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a3d      	ldr	r2, [pc, #244]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b37      	ldr	r3, [pc, #220]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a36      	ldr	r2, [pc, #216]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b30      	ldr	r3, [pc, #192]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <LCD_GPIO_Init+0x174>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000d5e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000d62:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000d70:	230e      	movs	r3, #14
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4824      	ldr	r0, [pc, #144]	@ (8000e0c <LCD_GPIO_Init+0x178>)
 8000d7c:	f002 f996 	bl	80030ac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000d80:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d84:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4820      	ldr	r0, [pc, #128]	@ (8000e10 <LCD_GPIO_Init+0x17c>)
 8000d8e:	f002 f98d 	bl	80030ac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000d92:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481d      	ldr	r0, [pc, #116]	@ (8000e14 <LCD_GPIO_Init+0x180>)
 8000da0:	f002 f984 	bl	80030ac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000da4:	2348      	movs	r3, #72	@ 0x48
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481a      	ldr	r0, [pc, #104]	@ (8000e18 <LCD_GPIO_Init+0x184>)
 8000db0:	f002 f97c 	bl	80030ac <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4816      	ldr	r0, [pc, #88]	@ (8000e1c <LCD_GPIO_Init+0x188>)
 8000dc2:	f002 f973 	bl	80030ac <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000dc6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000dca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <LCD_GPIO_Init+0x18c>)
 8000dd4:	f002 f96a 	bl	80030ac <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000ddc:	2309      	movs	r3, #9
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <LCD_GPIO_Init+0x17c>)
 8000de8:	f002 f960 	bl	80030ac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000dec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <LCD_GPIO_Init+0x18c>)
 8000dfa:	f002 f957 	bl	80030ac <HAL_GPIO_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3730      	adds	r7, #48	@ 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40021400 	.word	0x40021400
 8000e20:	40021800 	.word	0x40021800

08000e24 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b090      	sub	sp, #64	@ 0x40
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000e32:	23f0      	movs	r3, #240	@ 0xf0
 8000e34:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000e3a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e3e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000e44:	23ff      	movs	r3, #255	@ 0xff
 8000e46:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e52:	2305      	movs	r3, #5
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <LTCD_Layer_Init+0x78>)
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000e60:	23f0      	movs	r3, #240	@ 0xf0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000e64:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e68:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	4806      	ldr	r0, [pc, #24]	@ (8000ea0 <LTCD_Layer_Init+0x7c>)
 8000e86:	f003 fce9 	bl	800485c <HAL_LTDC_ConfigLayer>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000e90:	f000 f9f8 	bl	8001284 <LCD_Error_Handler>
	}
}
 8000e94:	bf00      	nop
 8000e96:	3740      	adds	r7, #64	@ 0x40
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200002f8 	.word	0x200002f8
 8000ea0:	2000021c 	.word	0x2000021c

08000ea4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <LTCD__Init+0xb0>)
 8000eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8000f58 <LTCD__Init+0xb4>)
 8000eac:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <LTCD__Init+0xb0>)
 8000eb0:	2209      	movs	r2, #9
 8000eb2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <LTCD__Init+0xb0>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ebc:	221d      	movs	r2, #29
 8000ebe:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ec8:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ecc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ed0:	f240 1243 	movw	r2, #323	@ 0x143
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ed8:	f240 1217 	movw	r2, #279	@ 0x117
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ee0:	f240 1247 	movw	r2, #327	@ 0x147
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <LTCD__Init+0xb0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <LTCD__Init+0xb8>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <LTCD__Init+0xb8>)
 8000f06:	22c0      	movs	r2, #192	@ 0xc0
 8000f08:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <LTCD__Init+0xb8>)
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <LTCD__Init+0xb8>)
 8000f12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f16:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000f18:	4810      	ldr	r0, [pc, #64]	@ (8000f5c <LTCD__Init+0xb8>)
 8000f1a:	f004 fafb 	bl	8005514 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <LTCD__Init+0xb0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <LTCD__Init+0xb0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <LTCD__Init+0xb0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <LTCD__Init+0xb0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000f36:	f7ff fead 	bl	8000c94 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <LTCD__Init+0xb0>)
 8000f3c:	f003 fbbe 	bl	80046bc <HAL_LTDC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000f46:	f000 f99d 	bl	8001284 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000f4a:	f000 fd47 	bl	80019dc <ili9341_Init>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000021c 	.word	0x2000021c
 8000f58:	40016800 	.word	0x40016800
 8000f5c:	200002c4 	.word	0x200002c4

08000f60 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	80bb      	strh	r3, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	4413      	add	r3, r2
 8000f82:	4904      	ldr	r1, [pc, #16]	@ (8000f94 <LCD_Draw_Pixel+0x34>)
 8000f84:	887a      	ldrh	r2, [r7, #2]
 8000f86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	200002f8 	.word	0x200002f8

08000f98 <LCD_Clear>:
    }
}


void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10e      	bne.n	8000fcc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e007      	b.n	8000fc4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000fb4:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <LCD_Clear+0x40>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	88ba      	ldrh	r2, [r7, #4]
 8000fba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000fca:	d3f3      	bcc.n	8000fb4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200002f8 	.word	0x200002f8

08000fdc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <LCD_SetTextColor+0x1c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	8013      	strh	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000

08000ffc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001004:	4a03      	ldr	r2, [pc, #12]	@ (8001014 <LCD_SetFont+0x18>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	200002f4 	.word	0x200002f4

08001018 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	603a      	str	r2, [r7, #0]
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	460b      	mov	r3, r1
 8001026:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e04c      	b.n	80010d0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	e03f      	b.n	80010bc <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <LCD_Draw_Char+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	889b      	ldrh	r3, [r3, #4]
 800104e:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <LCD_Draw_Char+0xd4>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b29b      	uxth	r3, r3
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	409a      	lsls	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	fa42 f303 	asr.w	r3, r2, r3
 8001064:	400b      	ands	r3, r1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <LCD_Draw_Char+0x5c>
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <LCD_Draw_Char+0xd0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	889b      	ldrh	r3, [r3, #4]
 8001070:	2b0c      	cmp	r3, #12
 8001072:	d920      	bls.n	80010b6 <LCD_Draw_Char+0x9e>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	fa42 f303 	asr.w	r3, r2, r3
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <LCD_Draw_Char+0x80>
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <LCD_Draw_Char+0xd0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	889b      	ldrh	r3, [r3, #4]
 8001094:	2b0c      	cmp	r3, #12
 8001096:	d80e      	bhi.n	80010b6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	b29a      	uxth	r2, r3
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	4413      	add	r3, r2
 80010a0:	b298      	uxth	r0, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <LCD_Draw_Char+0xd8>)
 80010ae:	8812      	ldrh	r2, [r2, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff ff55 	bl	8000f60 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <LCD_Draw_Char+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	889b      	ldrh	r3, [r3, #4]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d3b8      	bcc.n	800103c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <LCD_Draw_Char+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	88db      	ldrh	r3, [r3, #6]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4293      	cmp	r3, r2
 80010dc:	d3ab      	bcc.n	8001036 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002f4 	.word	0x200002f4
 80010ec:	aaaaaaab 	.word	0xaaaaaaab
 80010f0:	20000000 	.word	0x20000000

080010f4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	460b      	mov	r3, r1
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	3b20      	subs	r3, #32
 800110a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <LCD_DisplayChar+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	4907      	ldr	r1, [pc, #28]	@ (8001134 <LCD_DisplayChar+0x40>)
 8001116:	6809      	ldr	r1, [r1, #0]
 8001118:	88c9      	ldrh	r1, [r1, #6]
 800111a:	fb01 f303 	mul.w	r3, r1, r3
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	441a      	add	r2, r3
 8001122:	88b9      	ldrh	r1, [r7, #4]
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff76 	bl	8001018 <LCD_Draw_Char>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002f4 	.word	0x200002f4

08001138 <LCD_Draw_Tetris_Grid>:
	LCD_DisplayChar(140,160,'d');
}


/*************  THIS IS NEW   *******************/
void LCD_Draw_Tetris_Grid(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
    // Draw vertical lines
    for (int x = 0; x <= GRID_WIDTH; x++) {
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e00e      	b.n	8001162 <LCD_Draw_Tetris_Grid+0x2a>
        LCD_Draw_Vertical_Line(x * CELL_SIZE, 0, GRID_HEIGHT * CELL_SIZE, LCD_COLOR_BLACK);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b298      	uxth	r0, r3
 8001150:	2300      	movs	r3, #0
 8001152:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001156:	2100      	movs	r1, #0
 8001158:	f000 f81f 	bl	800119a <LCD_Draw_Vertical_Line>
    for (int x = 0; x <= GRID_WIDTH; x++) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0a      	cmp	r3, #10
 8001166:	dded      	ble.n	8001144 <LCD_Draw_Tetris_Grid+0xc>
    }

    // Draw horizontal lines
    for (int y = 0; y <= GRID_HEIGHT; y++) {
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	e00d      	b.n	800118a <LCD_Draw_Tetris_Grid+0x52>
        LCD_Draw_Horizontal_Line(0, y * CELL_SIZE, GRID_WIDTH * CELL_SIZE, LCD_COLOR_BLACK);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b299      	uxth	r1, r3
 800117a:	2300      	movs	r3, #0
 800117c:	2296      	movs	r2, #150	@ 0x96
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f832 	bl	80011e8 <LCD_Draw_Horizontal_Line>
    for (int y = 0; y <= GRID_HEIGHT; y++) {
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b14      	cmp	r3, #20
 800118e:	ddee      	ble.n	800116e <LCD_Draw_Tetris_Grid+0x36>
    }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color) {
 800119a:	b590      	push	{r4, r7, lr}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4604      	mov	r4, r0
 80011a2:	4608      	mov	r0, r1
 80011a4:	4611      	mov	r1, r2
 80011a6:	461a      	mov	r2, r3
 80011a8:	4623      	mov	r3, r4
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	4603      	mov	r3, r0
 80011ae:	80bb      	strh	r3, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i < len; i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	81fb      	strh	r3, [r7, #14]
 80011bc:	e00b      	b.n	80011d6 <LCD_Draw_Vertical_Line+0x3c>
        LCD_Draw_Pixel(x, y + i, color);
 80011be:	88ba      	ldrh	r2, [r7, #4]
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	4413      	add	r3, r2
 80011c4:	b299      	uxth	r1, r3
 80011c6:	883a      	ldrh	r2, [r7, #0]
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fec8 	bl	8000f60 <LCD_Draw_Pixel>
    for (uint16_t i = 0; i < len; i++) {
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	3301      	adds	r3, #1
 80011d4:	81fb      	strh	r3, [r7, #14]
 80011d6:	89fa      	ldrh	r2, [r7, #14]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3ef      	bcc.n	80011be <LCD_Draw_Vertical_Line+0x24>
    }
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}

080011e8 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4604      	mov	r4, r0
 80011f0:	4608      	mov	r0, r1
 80011f2:	4611      	mov	r1, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	4623      	mov	r3, r4
 80011f8:	80fb      	strh	r3, [r7, #6]
 80011fa:	4603      	mov	r3, r0
 80011fc:	80bb      	strh	r3, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]
 8001202:	4613      	mov	r3, r2
 8001204:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i < len; i++) {
 8001206:	2300      	movs	r3, #0
 8001208:	81fb      	strh	r3, [r7, #14]
 800120a:	e00b      	b.n	8001224 <LCD_Draw_Horizontal_Line+0x3c>
        LCD_Draw_Pixel(x + i, y, color);
 800120c:	88fa      	ldrh	r2, [r7, #6]
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	883a      	ldrh	r2, [r7, #0]
 8001216:	88b9      	ldrh	r1, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fea1 	bl	8000f60 <LCD_Draw_Pixel>
    for (uint16_t i = 0; i < len; i++) {
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	89fa      	ldrh	r2, [r7, #14]
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3ef      	bcc.n	800120c <LCD_Draw_Horizontal_Line+0x24>
    }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}

08001236 <LCD_Draw_Rectangle_Fill>:
    // Draw the inner circle in the background color to create the hollow effect
    LCD_Draw_Circle_Fill(Xpos, Ypos, InnerRad, backgroundColor);
}


void LCD_Draw_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color){
 8001236:	b590      	push	{r4, r7, lr}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	4604      	mov	r4, r0
 800123e:	4608      	mov	r0, r1
 8001240:	4611      	mov	r1, r2
 8001242:	461a      	mov	r2, r3
 8001244:	4623      	mov	r3, r4
 8001246:	80fb      	strh	r3, [r7, #6]
 8001248:	4603      	mov	r3, r0
 800124a:	80bb      	strh	r3, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	803b      	strh	r3, [r7, #0]
	for (uint16_t j = 0; j < height; j++)
 8001254:	2300      	movs	r3, #0
 8001256:	81fb      	strh	r3, [r7, #14]
 8001258:	e00b      	b.n	8001272 <LCD_Draw_Rectangle_Fill+0x3c>
	    {
	        LCD_Draw_Horizontal_Line(x, y + j, width, color);
 800125a:	88ba      	ldrh	r2, [r7, #4]
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	4413      	add	r3, r2
 8001260:	b299      	uxth	r1, r3
 8001262:	8c3b      	ldrh	r3, [r7, #32]
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	88f8      	ldrh	r0, [r7, #6]
 8001268:	f7ff ffbe 	bl	80011e8 <LCD_Draw_Horizontal_Line>
	for (uint16_t j = 0; j < height; j++)
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	3301      	adds	r3, #1
 8001270:	81fb      	strh	r3, [r7, #14]
 8001272:	89fa      	ldrh	r2, [r7, #14]
 8001274:	883b      	ldrh	r3, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3ef      	bcc.n	800125a <LCD_Draw_Rectangle_Fill+0x24>
	    }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}

08001284 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <LCD_Error_Handler+0x8>

08001290 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001294:	f001 fa1e 	bl	80026d4 <STMPE811_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b02      	cmp	r3, #2
 800129c:	d001      	beq.n	80012a2 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800129e:	bf00      	nop
 80012a0:	e7fd      	b.n	800129e <InitializeLCDTouch+0xe>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f001 fac8 	bl	8002844 <STMPE811_ReadTouch>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <RNG_Init>:

// Define a static variable to hold the configuration of the RNG.
static RNG_HandleTypeDef RNGConfig;

// Function to initialize the RNG hardware.
void RNG_Init(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
    // Set the instance of the RNG.
    RNGConfig.Instance = RNG;
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <RNG_Init+0x48>)
 80012c8:	4a10      	ldr	r2, [pc, #64]	@ (800130c <RNG_Init+0x4c>)
 80012ca:	601a      	str	r2, [r3, #0]

    // Enable the clock for the RNG hardware.
    __HAL_RCC_RNG_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <RNG_Init+0x50>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <RNG_Init+0x50>)
 80012d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012da:	6353      	str	r3, [r2, #52]	@ 0x34
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <RNG_Init+0x50>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]

    // Enable the RNG hardware.
    __HAL_RNG_ENABLE(&RNGConfig);
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <RNG_Init+0x48>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <RNG_Init+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0204 	orr.w	r2, r2, #4
 80012f6:	601a      	str	r2, [r3, #0]

    // Initialize the RNG with the specified configuration.
    HAL_RNG_Init(&RNGConfig);
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <RNG_Init+0x48>)
 80012fa:	f004 facb 	bl	8005894 <HAL_RNG_Init>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20025af8 	.word	0x20025af8
 800130c:	50060800 	.word	0x50060800
 8001310:	40023800 	.word	0x40023800

08001314 <RNG_Generate>:

// Function to generate a random number.
uint32_t RNG_Generate(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
    // Declare a variable to hold the random number.
    uint32_t RandomNumber;

    // Generate a random number and store it in the 'randomNumber' variable.
    HAL_RNG_GenerateRandomNumber(&RNGConfig, &RandomNumber);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4804      	ldr	r0, [pc, #16]	@ (8001330 <RNG_Generate+0x1c>)
 8001320:	f004 fae2 	bl	80058e8 <HAL_RNG_GenerateRandomNumber>

    // Return the generated random number.
    return RandomNumber;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20025af8 	.word	0x20025af8

08001334 <addSchedulerEvent>:
#include "Scheduler.h"

static uint32_t	scheduledEvents = 0;

void addSchedulerEvent(uint32_t event){
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <addSchedulerEvent+0x20>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4313      	orrs	r3, r2
 8001344:	4a03      	ldr	r2, [pc, #12]	@ (8001354 <addSchedulerEvent+0x20>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20025b08 	.word	0x20025b08

08001358 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	43da      	mvns	r2, r3
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <removeSchedulerEvent+0x20>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4013      	ands	r3, r2
 800136a:	4a03      	ldr	r2, [pc, #12]	@ (8001378 <removeSchedulerEvent+0x20>)
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20025b08 	.word	0x20025b08

0800137c <getScheduledEvents>:

uint32_t getScheduledEvents(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001380:	4b02      	ldr	r3, [pc, #8]	@ (800138c <getScheduledEvents+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20025b08 	.word	0x20025b08

08001390 <InitializeGrid>:
     {0,0,COLOR_ORANGE,0},
     {COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,0},
     {0,0,0,0}}
};

void InitializeGrid(void){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af02      	add	r7, sp, #8
    for(int y = 0; y < GRID_HEIGHT; y++){
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e016      	b.n	80013ca <InitializeGrid+0x3a>
        for(int x = 0; x < GRID_WIDTH; x++){
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	e00d      	b.n	80013be <InitializeGrid+0x2e>
            grid[y][x] = COLOR_NONE;
 80013a2:	4918      	ldr	r1, [pc, #96]	@ (8001404 <InitializeGrid+0x74>)
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	2200      	movs	r2, #0
 80013b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(int x = 0; x < GRID_WIDTH; x++){
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	ddee      	ble.n	80013a2 <InitializeGrid+0x12>
    for(int y = 0; y < GRID_HEIGHT; y++){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b13      	cmp	r3, #19
 80013ce:	dde5      	ble.n	800139c <InitializeGrid+0xc>
        }
    }
    //print score
        LCD_Draw_Rectangle_Fill(155,0,85,100,LCD_COLOR_BLACK);
 80013d0:	2300      	movs	r3, #0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2364      	movs	r3, #100	@ 0x64
 80013d6:	2255      	movs	r2, #85	@ 0x55
 80013d8:	2100      	movs	r1, #0
 80013da:	209b      	movs	r0, #155	@ 0x9b
 80013dc:	f7ff ff2b 	bl	8001236 <LCD_Draw_Rectangle_Fill>
        LCD_SetTextColor(LCD_COLOR_WHITE);
 80013e0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013e4:	f7ff fdfa 	bl	8000fdc <LCD_SetTextColor>
        DisplayString(160, 10, "SCORE");
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <InitializeGrid+0x78>)
 80013ea:	210a      	movs	r1, #10
 80013ec:	20a0      	movs	r0, #160	@ 0xa0
 80013ee:	f7ff f8f1 	bl	80005d4 <DisplayString>
		DisplayString(180, 50, "0");
 80013f2:	4a06      	ldr	r2, [pc, #24]	@ (800140c <InitializeGrid+0x7c>)
 80013f4:	2132      	movs	r1, #50	@ 0x32
 80013f6:	20b4      	movs	r0, #180	@ 0xb4
 80013f8:	f7ff f8ec 	bl	80005d4 <DisplayString>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20025b0c 	.word	0x20025b0c
 8001408:	080060ac 	.word	0x080060ac
 800140c:	080060b4 	.word	0x080060b4

08001410 <PrintGrid>:

void PrintGrid(void) {
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b085      	sub	sp, #20
 8001414:	af02      	add	r7, sp, #8
    for(int y = 0; y < GRID_HEIGHT; y++){
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e026      	b.n	800146a <PrintGrid+0x5a>
        for(int x = 0; x < GRID_WIDTH; x++){
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	e01d      	b.n	800145e <PrintGrid+0x4e>
        	LCD_Draw_Rectangle_Fill(x*15,y*15,15,15,grid[y][x]);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	b298      	uxth	r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b299      	uxth	r1, r3
 800143a:	4c10      	ldr	r4, [pc, #64]	@ (800147c <PrintGrid+0x6c>)
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	230f      	movs	r3, #15
 8001452:	220f      	movs	r2, #15
 8001454:	f7ff feef 	bl	8001236 <LCD_Draw_Rectangle_Fill>
        for(int x = 0; x < GRID_WIDTH; x++){
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	ddde      	ble.n	8001422 <PrintGrid+0x12>
    for(int y = 0; y < GRID_HEIGHT; y++){
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b13      	cmp	r3, #19
 800146e:	ddd5      	ble.n	800141c <PrintGrid+0xc>
        }
    }
    LCD_Draw_Tetris_Grid();
 8001470:	f7ff fe62 	bl	8001138 <LCD_Draw_Tetris_Grid>
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20025b0c 	.word	0x20025b0c

08001480 <removeTetrimino>:

void removeTetrimino(int shape[4][4], int x, int y){
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 4; i++){
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e023      	b.n	80014da <removeTetrimino+0x5a>
		for(int j = 0; j < 4; j++){
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e01a      	b.n	80014ce <removeTetrimino+0x4e>
			if(shape[i][j] != COLOR_NONE){
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00e      	beq.n	80014c8 <removeTetrimino+0x48>
				grid[y + i][x + j] = COLOR_NONE;
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	441a      	add	r2, r3
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4419      	add	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	@ (80014ec <removeTetrimino+0x6c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	440b      	add	r3, r1
 80014c2:	2200      	movs	r2, #0
 80014c4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(int j = 0; j < 4; j++){
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	3301      	adds	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	dde1      	ble.n	8001498 <removeTetrimino+0x18>
	for(int i = 0; i < 4; i++){
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	ddd8      	ble.n	8001492 <removeTetrimino+0x12>
			}
		}
	}
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20025b0c 	.word	0x20025b0c

080014f0 <PlaceTetrimino>:

bool PlaceTetrimino(int shape[4][4], int x, int y){
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
    if(CheckCollision(shape, x, y)){
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f8f9 	bl	80016f8 <CheckCollision>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <PlaceTetrimino+0x20>
        return false;
 800150c:	2300      	movs	r3, #0
 800150e:	e032      	b.n	8001576 <PlaceTetrimino+0x86>
    }
    for(int i = 0; i < 4; i++){
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e02b      	b.n	800156e <PlaceTetrimino+0x7e>
        for(int j = 0; j < 4; j++){
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	e022      	b.n	8001562 <PlaceTetrimino+0x72>
            if(shape[i][j] != COLOR_NONE){
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <PlaceTetrimino+0x6c>
                grid[y + i][x + j] = shape[i][j];
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	441a      	add	r2, r3
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4419      	add	r1, r3
 8001548:	b284      	uxth	r4, r0
 800154a:	480d      	ldr	r0, [pc, #52]	@ (8001580 <PlaceTetrimino+0x90>)
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	440b      	add	r3, r1
 8001556:	4622      	mov	r2, r4
 8001558:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(int j = 0; j < 4; j++){
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	3301      	adds	r3, #1
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b03      	cmp	r3, #3
 8001566:	ddd9      	ble.n	800151c <PlaceTetrimino+0x2c>
    for(int i = 0; i < 4; i++){
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b03      	cmp	r3, #3
 8001572:	ddd0      	ble.n	8001516 <PlaceTetrimino+0x26>
            }
        }
    }
    return true;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	bf00      	nop
 8001580:	20025b0c 	.word	0x20025b0c

08001584 <MoveTetrimino>:

// -1 for left, 1 for right, 0 for down
bool MoveTetrimino(int shape[4][4], int *x, int *y, int direction){
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
    int newX = *x;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]
    int newY = *y;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]

    if(direction == -1){
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d103      	bne.n	80015ae <MoveTetrimino+0x2a>
        newX -= 1;  // Move left
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00c      	b.n	80015c8 <MoveTetrimino+0x44>
    }else if(direction == 1){
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d103      	bne.n	80015bc <MoveTetrimino+0x38>
        newX += 1;  // Move right
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e005      	b.n	80015c8 <MoveTetrimino+0x44>
    }else if(direction == 0){
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <MoveTetrimino+0x44>
        newY += 1;  // Move down
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	3301      	adds	r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
    }
    removeTetrimino(shape, *x, *y); // REMOVE old
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff54 	bl	8001480 <removeTetrimino>
    if(!CheckCollision(shape, newX, newY)){
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f88b 	bl	80016f8 <CheckCollision>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00f      	beq.n	800160e <MoveTetrimino+0x8a>
        *x = newX;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
        *y = newY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	601a      	str	r2, [r3, #0]
        PlaceTetrimino(shape, *x, *y); // place new
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	6819      	ldr	r1, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff ff73 	bl	80014f0 <PlaceTetrimino>
        return true;
 800160a:	2301      	movs	r3, #1
 800160c:	e008      	b.n	8001620 <MoveTetrimino+0x9c>
    }
    PlaceTetrimino(shape, *x, *y); // place back old
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff ff69 	bl	80014f0 <PlaceTetrimino>
    return false;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <RotateTetrimino>:

void RotateTetrimino(int currentShape[4][4], int x, int y){
 8001628:	b580      	push	{r7, lr}
 800162a:	b098      	sub	sp, #96	@ 0x60
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
    int temp[4][4];

    // Copy the rotated shape into the temporary array
    for(int i = 0; i < 4; i++){
 8001634:	2300      	movs	r3, #0
 8001636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001638:	e01d      	b.n	8001676 <RotateTetrimino+0x4e>
        for (int j = 0; j < 4; j++){
 800163a:	2300      	movs	r3, #0
 800163c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800163e:	e014      	b.n	800166a <RotateTetrimino+0x42>
            temp[i][j] = currentShape[3 - j][i];
 8001640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001642:	f1c3 0303 	rsb	r3, r3, #3
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800164e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001654:	0099      	lsls	r1, r3, #2
 8001656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001658:	440b      	add	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	3360      	adds	r3, #96	@ 0x60
 800165e:	443b      	add	r3, r7
 8001660:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++){
 8001664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001666:	3301      	adds	r3, #1
 8001668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800166a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800166c:	2b03      	cmp	r3, #3
 800166e:	dde7      	ble.n	8001640 <RotateTetrimino+0x18>
    for(int i = 0; i < 4; i++){
 8001670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001672:	3301      	adds	r3, #1
 8001674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001678:	2b03      	cmp	r3, #3
 800167a:	ddde      	ble.n	800163a <RotateTetrimino+0x12>
        }
    }
    removeTetrimino(currentShape, x, y); // remove old
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff fefd 	bl	8001480 <removeTetrimino>
    // Check if the rotated shape can be placed in the current position
    if(!CheckCollision(temp, x, y)){
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f832 	bl	80016f8 <CheckCollision>
 8001694:	4603      	mov	r3, r0
 8001696:	f083 0301 	eor.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d021      	beq.n	80016e4 <RotateTetrimino+0xbc>
        // Copy the temporary array back to the original shape array
        for(int i = 0; i < 4; i++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80016a4:	e01b      	b.n	80016de <RotateTetrimino+0xb6>
            for (int j = 0; j < 4; j++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80016aa:	e012      	b.n	80016d2 <RotateTetrimino+0xaa>
            	currentShape[i][j] = temp[i][j];
 80016ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	441a      	add	r2, r3
 80016b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b6:	0099      	lsls	r1, r3, #2
 80016b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016ba:	440b      	add	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3360      	adds	r3, #96	@ 0x60
 80016c0:	443b      	add	r3, r7
 80016c2:	f853 1c50 	ldr.w	r1, [r3, #-80]
 80016c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int j = 0; j < 4; j++){
 80016cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016ce:	3301      	adds	r3, #1
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	dde9      	ble.n	80016ac <RotateTetrimino+0x84>
        for(int i = 0; i < 4; i++){
 80016d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016da:	3301      	adds	r3, #1
 80016dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80016de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	dde0      	ble.n	80016a6 <RotateTetrimino+0x7e>
            }
        }
    }
    PlaceTetrimino(currentShape, x, y);// place back either new or old
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff ff01 	bl	80014f0 <PlaceTetrimino>
}
 80016ee:	bf00      	nop
 80016f0:	3760      	adds	r7, #96	@ 0x60
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <CheckCollision>:

bool CheckCollision(int shape[4][4], int x, int y){
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
    for(int i = 0; i < 4; i++){
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	e036      	b.n	8001778 <CheckCollision+0x80>
        for(int j = 0; j < 4; j++){
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	e02d      	b.n	800176c <CheckCollision+0x74>
            if(shape[i][j] != COLOR_NONE){
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d021      	beq.n	8001766 <CheckCollision+0x6e>
                int newX = x + j;
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
                int newY = y + i;
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
                if(newX < 0 || newX >= GRID_WIDTH || newY < 0 || newY >= GRID_HEIGHT || grid[newY][newX] != COLOR_NONE){
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db14      	blt.n	8001762 <CheckCollision+0x6a>
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b09      	cmp	r3, #9
 800173c:	dc11      	bgt.n	8001762 <CheckCollision+0x6a>
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0e      	blt.n	8001762 <CheckCollision+0x6a>
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b13      	cmp	r3, #19
 8001748:	dc0b      	bgt.n	8001762 <CheckCollision+0x6a>
 800174a:	4910      	ldr	r1, [pc, #64]	@ (800178c <CheckCollision+0x94>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4413      	add	r3, r2
 800175a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <CheckCollision+0x6e>
                    return true;
 8001762:	2301      	movs	r3, #1
 8001764:	e00c      	b.n	8001780 <CheckCollision+0x88>
        for(int j = 0; j < 4; j++){
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	3301      	adds	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b03      	cmp	r3, #3
 8001770:	ddce      	ble.n	8001710 <CheckCollision+0x18>
    for(int i = 0; i < 4; i++){
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b03      	cmp	r3, #3
 800177c:	ddc5      	ble.n	800170a <CheckCollision+0x12>
                }
            }
        }
    }
    return false;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3724      	adds	r7, #36	@ 0x24
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20025b0c 	.word	0x20025b0c

08001790 <ClearLines>:

void ClearLines(int *score, int *single, int *doubles, int *triple, int *tetris){
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	@ 0x40
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
    int linesCleared = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34

    for(int y = 0; y < GRID_HEIGHT; y++){//Check each level
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017a6:	e05b      	b.n	8001860 <ClearLines+0xd0>
        bool fullLine = true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for(int x = 0; x < GRID_WIDTH; x++){//Check full line
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b2:	e012      	b.n	80017da <ClearLines+0x4a>
            if(grid[y][x] == COLOR_NONE){
 80017b4:	495f      	ldr	r1, [pc, #380]	@ (8001934 <ClearLines+0x1a4>)
 80017b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017c2:	4413      	add	r3, r2
 80017c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <ClearLines+0x44>
                fullLine = false;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 80017d2:	e005      	b.n	80017e0 <ClearLines+0x50>
        for(int x = 0; x < GRID_WIDTH; x++){//Check full line
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	3301      	adds	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	2b09      	cmp	r3, #9
 80017de:	dde9      	ble.n	80017b4 <ClearLines+0x24>
            }
        }
        if(fullLine){
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d038      	beq.n	800185a <ClearLines+0xca>
            linesCleared++;
 80017e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ea:	3301      	adds	r3, #1
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
            for(int k = y; k > 0; k--){
 80017ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f2:	e021      	b.n	8001838 <ClearLines+0xa8>
                for(int x = 0; x < GRID_WIDTH; x++){
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
 80017f8:	e018      	b.n	800182c <ClearLines+0x9c>
                    grid[k][x] = grid[k - 1][x];
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	1e5a      	subs	r2, r3, #1
 80017fe:	494d      	ldr	r1, [pc, #308]	@ (8001934 <ClearLines+0x1a4>)
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	6a3a      	ldr	r2, [r7, #32]
 800180a:	4413      	add	r3, r2
 800180c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001810:	4948      	ldr	r1, [pc, #288]	@ (8001934 <ClearLines+0x1a4>)
 8001812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	4602      	mov	r2, r0
 8001822:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for(int x = 0; x < GRID_WIDTH; x++){
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	3301      	adds	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	2b09      	cmp	r3, #9
 8001830:	dde3      	ble.n	80017fa <ClearLines+0x6a>
            for(int k = y; k > 0; k--){
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	3b01      	subs	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	2b00      	cmp	r3, #0
 800183c:	dcda      	bgt.n	80017f4 <ClearLines+0x64>
                }
            }
            for(int x = 0; x < GRID_WIDTH; x++){
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e007      	b.n	8001854 <ClearLines+0xc4>
                grid[0][x] = COLOR_NONE;
 8001844:	4a3b      	ldr	r2, [pc, #236]	@ (8001934 <ClearLines+0x1a4>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2100      	movs	r1, #0
 800184a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for(int x = 0; x < GRID_WIDTH; x++){
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf4      	ble.n	8001844 <ClearLines+0xb4>
    for(int y = 0; y < GRID_HEIGHT; y++){//Check each level
 800185a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185c:	3301      	adds	r3, #1
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001862:	2b13      	cmp	r3, #19
 8001864:	dda0      	ble.n	80017a8 <ClearLines+0x18>
            }
        }
    }

    // Add points to the score based on the number of lines cleared
    switch (linesCleared) {
 8001866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001868:	3b01      	subs	r3, #1
 800186a:	2b03      	cmp	r3, #3
 800186c:	d83a      	bhi.n	80018e4 <ClearLines+0x154>
 800186e:	a201      	add	r2, pc, #4	@ (adr r2, 8001874 <ClearLines+0xe4>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001885 	.word	0x08001885
 8001878:	0800189d 	.word	0x0800189d
 800187c:	080018b5 	.word	0x080018b5
 8001880:	080018cd 	.word	0x080018cd
        case 1:
            *score += 100; // 100 points for 1 line
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	601a      	str	r2, [r3, #0]
            *single += 1;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	601a      	str	r2, [r3, #0]
            break;
 800189a:	e024      	b.n	80018e6 <ClearLines+0x156>
        case 2:
            *score += 300; // 300 points for 2 lines
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	601a      	str	r2, [r3, #0]
            *doubles += 1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
            break;
 80018b2:	e018      	b.n	80018e6 <ClearLines+0x156>
        case 3:
            *score += 500; // 500 points for 3 lines
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	601a      	str	r2, [r3, #0]
            *triple += 1;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	601a      	str	r2, [r3, #0]
            break;
 80018ca:	e00c      	b.n	80018e6 <ClearLines+0x156>
        case 4:
            *score += 800; // 800 points for 4 lines
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f503 7248 	add.w	r2, r3, #800	@ 0x320
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	601a      	str	r2, [r3, #0]
            *tetris += 1;
 80018d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018e0:	601a      	str	r2, [r3, #0]
            break;
 80018e2:	e000      	b.n	80018e6 <ClearLines+0x156>
        default:
            break;
 80018e4:	bf00      	nop
    }
    if(linesCleared > 0){
 80018e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dd1f      	ble.n	800192c <ClearLines+0x19c>
    	LCD_Draw_Rectangle_Fill(155,0,85,100,LCD_COLOR_BLACK);
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2364      	movs	r3, #100	@ 0x64
 80018f2:	2255      	movs	r2, #85	@ 0x55
 80018f4:	2100      	movs	r1, #0
 80018f6:	209b      	movs	r0, #155	@ 0x9b
 80018f8:	f7ff fc9d 	bl	8001236 <LCD_Draw_Rectangle_Fill>
		LCD_SetTextColor(LCD_COLOR_WHITE);
 80018fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001900:	f7ff fb6c 	bl	8000fdc <LCD_SetTextColor>
		DisplayString(160, 10, "SCORE");
 8001904:	4a0c      	ldr	r2, [pc, #48]	@ (8001938 <ClearLines+0x1a8>)
 8001906:	210a      	movs	r1, #10
 8001908:	20a0      	movs	r0, #160	@ 0xa0
 800190a:	f7fe fe63 	bl	80005d4 <DisplayString>
		char formatted[6];
		itoa(*score, &formatted, 10);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f107 0114 	add.w	r1, r7, #20
 8001916:	220a      	movs	r2, #10
 8001918:	4618      	mov	r0, r3
 800191a:	f004 fb31 	bl	8005f80 <itoa>
		DisplayString(180, 50, formatted);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	461a      	mov	r2, r3
 8001924:	2132      	movs	r1, #50	@ 0x32
 8001926:	20b4      	movs	r0, #180	@ 0xb4
 8001928:	f7fe fe54 	bl	80005d4 <DisplayString>
    }
}
 800192c:	bf00      	nop
 800192e:	3738      	adds	r7, #56	@ 0x38
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20025b0c 	.word	0x20025b0c
 8001938:	080060ac 	.word	0x080060ac

0800193c <SpawnTetrimino>:


bool SpawnTetrimino(int currentShape[4][4], int *x, int *y){
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	int num = RNG_Generate()%7;
 8001948:	f7ff fce4 	bl	8001314 <RNG_Generate>
 800194c:	4601      	mov	r1, r0
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <SpawnTetrimino+0x98>)
 8001950:	fba3 2301 	umull	r2, r3, r3, r1
 8001954:	1aca      	subs	r2, r1, r3
 8001956:	0852      	lsrs	r2, r2, #1
 8001958:	4413      	add	r3, r2
 800195a:	089a      	lsrs	r2, r3, #2
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	1aca      	subs	r2, r1, r3
 8001964:	617a      	str	r2, [r7, #20]
	for(int i = 0; i < 4; i++){
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e01c      	b.n	80019a6 <SpawnTetrimino+0x6a>
		for (int j = 0; j < 4; j++){
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	e013      	b.n	800199a <SpawnTetrimino+0x5e>
			currentShape[i][j] = Tetriminoes[num][i][j];
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	4817      	ldr	r0, [pc, #92]	@ (80019d8 <SpawnTetrimino+0x9c>)
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	0091      	lsls	r1, r2, #2
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	440a      	add	r2, r1
 8001984:	0091      	lsls	r1, r2, #2
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	440a      	add	r2, r1
 800198a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < 4; j++){
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	3301      	adds	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b03      	cmp	r3, #3
 800199e:	dde8      	ble.n	8001972 <SpawnTetrimino+0x36>
	for(int i = 0; i < 4; i++){
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	dddf      	ble.n	800196c <SpawnTetrimino+0x30>
		}
	}
    *x = 3; 
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2203      	movs	r2, #3
 80019b0:	601a      	str	r2, [r3, #0]
    *y = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
    return PlaceTetrimino(currentShape, *x, *y);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	6819      	ldr	r1, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff fd94 	bl	80014f0 <PlaceTetrimino>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	24924925 	.word	0x24924925
 80019d8:	20000004 	.word	0x20000004

080019dc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019e0:	f000 f9fe 	bl	8001de0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80019e4:	20ca      	movs	r0, #202	@ 0xca
 80019e6:	f000 f943 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80019ea:	20c3      	movs	r0, #195	@ 0xc3
 80019ec:	f000 f94d 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80019f0:	2008      	movs	r0, #8
 80019f2:	f000 f94a 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80019f6:	2050      	movs	r0, #80	@ 0x50
 80019f8:	f000 f947 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80019fc:	20cf      	movs	r0, #207	@ 0xcf
 80019fe:	f000 f937 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f941 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001a08:	20c1      	movs	r0, #193	@ 0xc1
 8001a0a:	f000 f93e 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001a0e:	2030      	movs	r0, #48	@ 0x30
 8001a10:	f000 f93b 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001a14:	20ed      	movs	r0, #237	@ 0xed
 8001a16:	f000 f92b 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001a1a:	2064      	movs	r0, #100	@ 0x64
 8001a1c:	f000 f935 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f932 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001a26:	2012      	movs	r0, #18
 8001a28:	f000 f92f 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001a2c:	2081      	movs	r0, #129	@ 0x81
 8001a2e:	f000 f92c 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001a32:	20e8      	movs	r0, #232	@ 0xe8
 8001a34:	f000 f91c 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001a38:	2085      	movs	r0, #133	@ 0x85
 8001a3a:	f000 f926 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f923 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a44:	2078      	movs	r0, #120	@ 0x78
 8001a46:	f000 f920 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001a4a:	20cb      	movs	r0, #203	@ 0xcb
 8001a4c:	f000 f910 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001a50:	2039      	movs	r0, #57	@ 0x39
 8001a52:	f000 f91a 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001a56:	202c      	movs	r0, #44	@ 0x2c
 8001a58:	f000 f917 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 f914 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001a62:	2034      	movs	r0, #52	@ 0x34
 8001a64:	f000 f911 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f000 f90e 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001a6e:	20f7      	movs	r0, #247	@ 0xf7
 8001a70:	f000 f8fe 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001a74:	2020      	movs	r0, #32
 8001a76:	f000 f908 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001a7a:	20ea      	movs	r0, #234	@ 0xea
 8001a7c:	f000 f8f8 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f000 f902 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f8ff 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001a8c:	20b1      	movs	r0, #177	@ 0xb1
 8001a8e:	f000 f8ef 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f8f9 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a98:	201b      	movs	r0, #27
 8001a9a:	f000 f8f6 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001a9e:	20b6      	movs	r0, #182	@ 0xb6
 8001aa0:	f000 f8e6 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f000 f8f0 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001aaa:	20a2      	movs	r0, #162	@ 0xa2
 8001aac:	f000 f8ed 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001ab0:	20c0      	movs	r0, #192	@ 0xc0
 8001ab2:	f000 f8dd 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ab6:	2010      	movs	r0, #16
 8001ab8:	f000 f8e7 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001abc:	20c1      	movs	r0, #193	@ 0xc1
 8001abe:	f000 f8d7 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ac2:	2010      	movs	r0, #16
 8001ac4:	f000 f8e1 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ac8:	20c5      	movs	r0, #197	@ 0xc5
 8001aca:	f000 f8d1 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ace:	2045      	movs	r0, #69	@ 0x45
 8001ad0:	f000 f8db 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ad4:	2015      	movs	r0, #21
 8001ad6:	f000 f8d8 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ada:	20c7      	movs	r0, #199	@ 0xc7
 8001adc:	f000 f8c8 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ae0:	2090      	movs	r0, #144	@ 0x90
 8001ae2:	f000 f8d2 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001ae6:	2036      	movs	r0, #54	@ 0x36
 8001ae8:	f000 f8c2 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001aec:	20c8      	movs	r0, #200	@ 0xc8
 8001aee:	f000 f8cc 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001af2:	20f2      	movs	r0, #242	@ 0xf2
 8001af4:	f000 f8bc 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 f8c6 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001afe:	20b0      	movs	r0, #176	@ 0xb0
 8001b00:	f000 f8b6 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001b04:	20c2      	movs	r0, #194	@ 0xc2
 8001b06:	f000 f8c0 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001b0a:	20b6      	movs	r0, #182	@ 0xb6
 8001b0c:	f000 f8b0 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001b10:	200a      	movs	r0, #10
 8001b12:	f000 f8ba 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001b16:	20a7      	movs	r0, #167	@ 0xa7
 8001b18:	f000 f8b7 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001b1c:	2027      	movs	r0, #39	@ 0x27
 8001b1e:	f000 f8b4 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001b22:	2004      	movs	r0, #4
 8001b24:	f000 f8b1 	bl	8001c8a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001b28:	202a      	movs	r0, #42	@ 0x2a
 8001b2a:	f000 f8a1 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 f8ab 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f000 f8a8 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f8a5 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001b40:	20ef      	movs	r0, #239	@ 0xef
 8001b42:	f000 f8a2 	bl	8001c8a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001b46:	202b      	movs	r0, #43	@ 0x2b
 8001b48:	f000 f892 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f000 f89c 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f899 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 f896 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001b5e:	203f      	movs	r0, #63	@ 0x3f
 8001b60:	f000 f893 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001b64:	20f6      	movs	r0, #246	@ 0xf6
 8001b66:	f000 f883 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 f88d 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 f88a 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001b76:	2006      	movs	r0, #6
 8001b78:	f000 f887 	bl	8001c8a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001b7c:	202c      	movs	r0, #44	@ 0x2c
 8001b7e:	f000 f877 	bl	8001c70 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b82:	20c8      	movs	r0, #200	@ 0xc8
 8001b84:	f000 f9e8 	bl	8001f58 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001b88:	2026      	movs	r0, #38	@ 0x26
 8001b8a:	f000 f871 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 f87b 	bl	8001c8a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001b94:	20e0      	movs	r0, #224	@ 0xe0
 8001b96:	f000 f86b 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f875 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001ba0:	2029      	movs	r0, #41	@ 0x29
 8001ba2:	f000 f872 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001ba6:	2024      	movs	r0, #36	@ 0x24
 8001ba8:	f000 f86f 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001bac:	200c      	movs	r0, #12
 8001bae:	f000 f86c 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001bb2:	200e      	movs	r0, #14
 8001bb4:	f000 f869 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001bb8:	2009      	movs	r0, #9
 8001bba:	f000 f866 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001bbe:	204e      	movs	r0, #78	@ 0x4e
 8001bc0:	f000 f863 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001bc4:	2078      	movs	r0, #120	@ 0x78
 8001bc6:	f000 f860 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001bca:	203c      	movs	r0, #60	@ 0x3c
 8001bcc:	f000 f85d 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001bd0:	2009      	movs	r0, #9
 8001bd2:	f000 f85a 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001bd6:	2013      	movs	r0, #19
 8001bd8:	f000 f857 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001bdc:	2005      	movs	r0, #5
 8001bde:	f000 f854 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001be2:	2017      	movs	r0, #23
 8001be4:	f000 f851 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001be8:	2011      	movs	r0, #17
 8001bea:	f000 f84e 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 f84b 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001bf4:	20e1      	movs	r0, #225	@ 0xe1
 8001bf6:	f000 f83b 	bl	8001c70 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f845 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001c00:	2016      	movs	r0, #22
 8001c02:	f000 f842 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c06:	201b      	movs	r0, #27
 8001c08:	f000 f83f 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001c0c:	2004      	movs	r0, #4
 8001c0e:	f000 f83c 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001c12:	2011      	movs	r0, #17
 8001c14:	f000 f839 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f000 f836 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001c1e:	2031      	movs	r0, #49	@ 0x31
 8001c20:	f000 f833 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001c24:	2033      	movs	r0, #51	@ 0x33
 8001c26:	f000 f830 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001c2a:	2042      	movs	r0, #66	@ 0x42
 8001c2c:	f000 f82d 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001c30:	2005      	movs	r0, #5
 8001c32:	f000 f82a 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001c36:	200c      	movs	r0, #12
 8001c38:	f000 f827 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f000 f824 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001c42:	2028      	movs	r0, #40	@ 0x28
 8001c44:	f000 f821 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001c48:	202f      	movs	r0, #47	@ 0x2f
 8001c4a:	f000 f81e 	bl	8001c8a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f81b 	bl	8001c8a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001c54:	2011      	movs	r0, #17
 8001c56:	f000 f80b 	bl	8001c70 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001c5a:	20c8      	movs	r0, #200	@ 0xc8
 8001c5c:	f000 f97c 	bl	8001f58 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001c60:	2029      	movs	r0, #41	@ 0x29
 8001c62:	f000 f805 	bl	8001c70 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001c66:	202c      	movs	r0, #44	@ 0x2c
 8001c68:	f000 f802 	bl	8001c70 <ili9341_Write_Reg>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f949 	bl	8001f14 <LCD_IO_WriteReg>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f91a 	bl	8001ed0 <LCD_IO_WriteData>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ca8:	4819      	ldr	r0, [pc, #100]	@ (8001d10 <SPI_Init+0x6c>)
 8001caa:	f004 f867 	bl	8005d7c <HAL_SPI_GetState>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12b      	bne.n	8001d0c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <SPI_Init+0x6c>)
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <SPI_Init+0x70>)
 8001cb8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <SPI_Init+0x6c>)
 8001cbc:	2218      	movs	r2, #24
 8001cbe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <SPI_Init+0x6c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <SPI_Init+0x6c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <SPI_Init+0x6c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <SPI_Init+0x6c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <SPI_Init+0x6c>)
 8001cda:	2207      	movs	r2, #7
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <SPI_Init+0x6c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <SPI_Init+0x6c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <SPI_Init+0x6c>)
 8001cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <SPI_Init+0x6c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SPI_Init+0x6c>)
 8001cfa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cfe:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001d00:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <SPI_Init+0x6c>)
 8001d02:	f000 f833 	bl	8001d6c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d06:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <SPI_Init+0x6c>)
 8001d08:	f003 fe44 	bl	8005994 <HAL_SPI_Init>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20025c9c 	.word	0x20025c9c
 8001d14:	40015000 	.word	0x40015000

08001d18 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <SPI_Write+0x34>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	1db9      	adds	r1, r7, #6
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4808      	ldr	r0, [pc, #32]	@ (8001d50 <SPI_Write+0x38>)
 8001d30:	f003 fee1 	bl	8005af6 <HAL_SPI_Transmit>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001d3e:	f000 f809 	bl	8001d54 <SPI_Error>
  }
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200001cc 	.word	0x200001cc
 8001d50:	20025c9c 	.word	0x20025c9c

08001d54 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001d58:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <SPI_Error+0x14>)
 8001d5a:	f003 fea4 	bl	8005aa6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001d5e:	f7ff ffa1 	bl	8001ca4 <SPI_Init>
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20025c9c 	.word	0x20025c9c

08001d6c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <SPI_MspInit+0x6c>)
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <SPI_MspInit+0x6c>)
 8001d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d82:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <SPI_MspInit+0x6c>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <SPI_MspInit+0x6c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <SPI_MspInit+0x6c>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <SPI_MspInit+0x6c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001dac:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <SPI_MspInit+0x70>)
 8001dca:	f001 f96f 	bl	80030ac <HAL_GPIO_Init>
}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	@ 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40021400 	.word	0x40021400

08001de0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001de6:	4b36      	ldr	r3, [pc, #216]	@ (8001ec0 <LCD_IO_Init+0xe0>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d164      	bne.n	8001eb8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001dee:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <LCD_IO_Init+0xe0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	4b32      	ldr	r3, [pc, #200]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	4a31      	ldr	r2, [pc, #196]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	4827      	ldr	r0, [pc, #156]	@ (8001ec8 <LCD_IO_Init+0xe8>)
 8001e2a:	f001 f93f 	bl	80030ac <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4619      	mov	r1, r3
 8001e62:	4819      	ldr	r0, [pc, #100]	@ (8001ec8 <LCD_IO_Init+0xe8>)
 8001e64:	f001 f922 	bl	80030ac <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <LCD_IO_Init+0xe4>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001e84:	2304      	movs	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <LCD_IO_Init+0xec>)
 8001e9c:	f001 f906 	bl	80030ac <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <LCD_IO_Init+0xec>)
 8001ea6:	f001 fbcc 	bl	8003642 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2104      	movs	r1, #4
 8001eae:	4807      	ldr	r0, [pc, #28]	@ (8001ecc <LCD_IO_Init+0xec>)
 8001eb0:	f001 fbc7 	bl	8003642 <HAL_GPIO_WritePin>

    SPI_Init();
 8001eb4:	f7ff fef6 	bl	8001ca4 <SPI_Init>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20025cf4 	.word	0x20025cf4
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	40020800 	.word	0x40020800

08001ed0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ee0:	480a      	ldr	r0, [pc, #40]	@ (8001f0c <LCD_IO_WriteData+0x3c>)
 8001ee2:	f001 fbae 	bl	8003642 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2104      	movs	r1, #4
 8001eea:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <LCD_IO_WriteData+0x40>)
 8001eec:	f001 fba9 	bl	8003642 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff10 	bl	8001d18 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2104      	movs	r1, #4
 8001efc:	4804      	ldr	r0, [pc, #16]	@ (8001f10 <LCD_IO_WriteData+0x40>)
 8001efe:	f001 fba0 	bl	8003642 <HAL_GPIO_WritePin>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40020800 	.word	0x40020800

08001f14 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f24:	480a      	ldr	r0, [pc, #40]	@ (8001f50 <LCD_IO_WriteReg+0x3c>)
 8001f26:	f001 fb8c 	bl	8003642 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <LCD_IO_WriteReg+0x40>)
 8001f30:	f001 fb87 	bl	8003642 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff feed 	bl	8001d18 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2104      	movs	r1, #4
 8001f42:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <LCD_IO_WriteReg+0x40>)
 8001f44:	f001 fb7d 	bl	8003642 <HAL_GPIO_WritePin>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	40020800 	.word	0x40020800

08001f58 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 ff9b 	bl	8002e9c <HAL_Delay>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <main>:
#include "ApplicationCode.h"
void SystemClock_Config(void);
void SystemClockOverride(void);

int main(void)
{
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	b0a1      	sub	sp, #132	@ 0x84
 8001f74:	af04      	add	r7, sp, #16

  HAL_Init();
 8001f76:	f000 ff23 	bl	8002dc0 <HAL_Init>

  SystemClockOverride();
 8001f7a:	f000 f8f9 	bl	8002170 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001f7e:	f7fe faad 	bl	80004dc <ApplicationInit>


  HAL_Delay(500);
 8001f82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f86:	f000 ff89 	bl	8002e9c <HAL_Delay>

  static STMPE811_TouchData StaticTouchData;
  while (1)
    {
	    int PB = 0; //personal best score
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        Game_Select();  // START page
 8001f8e:	f7fe fb43 	bl	8000618 <Game_Select>
        addSchedulerEvent(PLAY_EVENT_MASK);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff f9ce 	bl	8001334 <addSchedulerEvent>

        uint32_t eventToRun = getScheduledEvents();  // Retrieve the currently scheduled events
 8001f98:	f7ff f9f0 	bl	800137c <getScheduledEvents>
 8001f9c:	6678      	str	r0, [r7, #100]	@ 0x64
        while(1){
            eventToRun = getScheduledEvents();  // Refresh the event status after handling the previous events
 8001f9e:	f7ff f9ed 	bl	800137c <getScheduledEvents>
 8001fa2:	6678      	str	r0, [r7, #100]	@ 0x64
            if(eventToRun & PLAY_EVENT_MASK){
 8001fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f7      	beq.n	8001f9e <main+0x2e>
            	InitializeGrid();
 8001fae:	f7ff f9ef 	bl	8001390 <InitializeGrid>
				int currentShapeIndex[4][4];
				int currentX, currentY;
				int timeloop = HAL_GetTick();
 8001fb2:	f000 ff69 	bl	8002e88 <HAL_GetTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
				int starttime = HAL_GetTick();
 8001fba:	f000 ff65 	bl	8002e88 <HAL_GetTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	663b      	str	r3, [r7, #96]	@ 0x60
				int score = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	657b      	str	r3, [r7, #84]	@ 0x54
				int single = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	653b      	str	r3, [r7, #80]	@ 0x50
				int doubles = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
				int triple = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
				int tetris = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	647b      	str	r3, [r7, #68]	@ 0x44
				SpawnTetrimino(currentShapeIndex, &currentX, &currentY);
 8001fd6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001fda:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fcab 	bl	800193c <SpawnTetrimino>
				PrintGrid();
 8001fe6:	f7ff fa13 	bl	8001410 <PrintGrid>
				while(1){
					eventToRun = getScheduledEvents();
 8001fea:	f7ff f9c7 	bl	800137c <getScheduledEvents>
 8001fee:	6678      	str	r0, [r7, #100]	@ 0x64
					if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8001ff0:	485d      	ldr	r0, [pc, #372]	@ (8002168 <main+0x1f8>)
 8001ff2:	f7ff f958 	bl	80012a6 <returnTouchStateAndLocation>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <main+0xa2>
						// Check touch coordinates for button presses
						if (StaticTouchData.x <= 150) {
 8001ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8002168 <main+0x1f8>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	2b96      	cmp	r3, #150	@ 0x96
 8002002:	d803      	bhi.n	800200c <main+0x9c>
							// right
							addSchedulerEvent(RIGHT_EVENT_MASK);
 8002004:	2010      	movs	r0, #16
 8002006:	f7ff f995 	bl	8001334 <addSchedulerEvent>
 800200a:	e002      	b.n	8002012 <main+0xa2>
						}else{
							//left
							addSchedulerEvent(LEFT_EVENT_MASK);
 800200c:	2020      	movs	r0, #32
 800200e:	f7ff f991 	bl	8001334 <addSchedulerEvent>
						}
					}
					if(BTN_Pressed()){
 8002012:	f7fe fac9 	bl	80005a8 <BTN_Pressed>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <main+0xb2>
						addSchedulerEvent(ROTATE_EVENT_MASK);
 800201c:	2008      	movs	r0, #8
 800201e:	f7ff f989 	bl	8001334 <addSchedulerEvent>
					}

					if(eventToRun & ROTATE_EVENT_MASK && !BTN_Pressed()){
 8002022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <main+0xde>
 800202c:	f7fe fabc 	bl	80005a8 <BTN_Pressed>
 8002030:	4603      	mov	r3, r0
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <main+0xde>
						RotateTetrimino(currentShapeIndex, currentX, currentY);
 800203c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800203e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff faf0 	bl	8001628 <RotateTetrimino>
						removeSchedulerEvent(ROTATE_EVENT_MASK);
 8002048:	2008      	movs	r0, #8
 800204a:	f7ff f985 	bl	8001358 <removeSchedulerEvent>
		            }
					if(eventToRun & RIGHT_EVENT_MASK){
 800204e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <main+0xfe>
						MoveTetrimino(currentShapeIndex, &currentX, &currentY, 1);
 8002058:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800205c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002060:	1d38      	adds	r0, r7, #4
 8002062:	2301      	movs	r3, #1
 8002064:	f7ff fa8e 	bl	8001584 <MoveTetrimino>
						removeSchedulerEvent(RIGHT_EVENT_MASK);
 8002068:	2010      	movs	r0, #16
 800206a:	f7ff f975 	bl	8001358 <removeSchedulerEvent>
					}
					if(eventToRun & LEFT_EVENT_MASK){
 800206e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <main+0x120>
						MoveTetrimino(currentShapeIndex, &currentX, &currentY, -1);
 8002078:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800207c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002080:	1d38      	adds	r0, r7, #4
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	f7ff fa7d 	bl	8001584 <MoveTetrimino>
						removeSchedulerEvent(LEFT_EVENT_MASK);
 800208a:	2020      	movs	r0, #32
 800208c:	f7ff f964 	bl	8001358 <removeSchedulerEvent>
					}
					// Handle user input for moving and rotating the Tetrimino
					if(HAL_GetTick()-timeloop > FALL_TIME){
 8002090:	f000 fefa 	bl	8002e88 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800209e:	4293      	cmp	r3, r2
 80020a0:	d93b      	bls.n	800211a <main+0x1aa>
						timeloop = HAL_GetTick();
 80020a2:	f000 fef1 	bl	8002e88 <HAL_GetTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	66bb      	str	r3, [r7, #104]	@ 0x68
						// Move the Tetrimino down
						if(!MoveTetrimino(currentShapeIndex, &currentX, &currentY, 0)){
 80020aa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80020ae:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80020b2:	1d38      	adds	r0, r7, #4
 80020b4:	2300      	movs	r3, #0
 80020b6:	f7ff fa65 	bl	8001584 <MoveTetrimino>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d029      	beq.n	800211a <main+0x1aa>
							// If it can't move down, place it and check for lines
							ClearLines(&score, &single, &doubles, &triple, &tetris);
 80020c6:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80020ca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80020ce:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80020d2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80020d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4623      	mov	r3, r4
 80020de:	f7ff fb57 	bl	8001790 <ClearLines>
							// Spawn a new Tetrimino
							if(!SpawnTetrimino(currentShapeIndex, &currentX, &currentY)){
 80020e2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80020e6:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fc25 	bl	800193c <SpawnTetrimino>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <main+0x1aa>
								addSchedulerEvent(RESULTS_EVENT_MASK);
 80020fe:	2002      	movs	r0, #2
 8002100:	f7ff f918 	bl	8001334 <addSchedulerEvent>
								break;
 8002104:	bf00      	nop
							}
						}
					}
					PrintGrid();
				}
				eventToRun = getScheduledEvents();
 8002106:	f7ff f939 	bl	800137c <getScheduledEvents>
 800210a:	6678      	str	r0, [r7, #100]	@ 0x64
				if(eventToRun & RESULTS_EVENT_MASK){
 800210c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	f43f af43 	beq.w	8001f9e <main+0x2e>
 8002118:	e002      	b.n	8002120 <main+0x1b0>
					PrintGrid();
 800211a:	f7ff f979 	bl	8001410 <PrintGrid>
					eventToRun = getScheduledEvents();
 800211e:	e764      	b.n	8001fea <main+0x7a>
					if(score > PB){
 8002120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002122:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002124:	429a      	cmp	r2, r3
 8002126:	da01      	bge.n	800212c <main+0x1bc>
						PB = score;
 8002128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212a:	66fb      	str	r3, [r7, #108]	@ 0x6c
					}
					Game_Select_2(score, (HAL_GetTick()-starttime) / 1000, single, doubles, triple, tetris, PB);
 800212c:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 800212e:	f000 feab 	bl	8002e88 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4a0c      	ldr	r2, [pc, #48]	@ (800216c <main+0x1fc>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	461e      	mov	r6, r3
 8002142:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002144:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8002146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800214a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800214c:	9102      	str	r1, [sp, #8]
 800214e:	9201      	str	r2, [sp, #4]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	462b      	mov	r3, r5
 8002154:	4602      	mov	r2, r0
 8002156:	4631      	mov	r1, r6
 8002158:	4620      	mov	r0, r4
 800215a:	f7fe fbab 	bl	80008b4 <Game_Select_2>
					removeSchedulerEvent(RESULTS_EVENT_MASK);
 800215e:	2002      	movs	r0, #2
 8002160:	f7ff f8fa 	bl	8001358 <removeSchedulerEvent>
            eventToRun = getScheduledEvents();  // Refresh the event status after handling the previous events
 8002164:	e71b      	b.n	8001f9e <main+0x2e>
 8002166:	bf00      	nop
 8002168:	20025cf8 	.word	0x20025cf8
 800216c:	10624dd3 	.word	0x10624dd3

08002170 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b092      	sub	sp, #72	@ 0x48
 8002174:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <SystemClockOverride+0x7c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <SystemClockOverride+0x7c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <SystemClockOverride+0x7c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002192:	2301      	movs	r3, #1
 8002194:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800219a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219c:	2302      	movs	r3, #2
 800219e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021a6:	2308      	movs	r3, #8
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021aa:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021b4:	2307      	movs	r3, #7
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fd22 	bl	8004c04 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021c0:	230f      	movs	r3, #15
 80021c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2302      	movs	r3, #2
 80021c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80021d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021dc:	2105      	movs	r1, #5
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 ff88 	bl	80050f4 <HAL_RCC_ClockConfig>
}
 80021e4:	bf00      	nop
 80021e6:	3748      	adds	r7, #72	@ 0x48
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800

080021f0 <Error_Handler>:


void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <Error_Handler+0x8>

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4a0f      	ldr	r2, [pc, #60]	@ (8002248 <HAL_MspInit+0x4c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002210:	6453      	str	r3, [r2, #68]	@ 0x44
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_MspInit+0x4c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800223a:	2007      	movs	r0, #7
 800223c:	f000 ff02 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a29      	ldr	r2, [pc, #164]	@ (8002310 <HAL_I2C_MspInit+0xc4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d14b      	bne.n	8002306 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b28      	ldr	r3, [pc, #160]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a27      	ldr	r2, [pc, #156]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80022a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2312      	movs	r3, #18
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022b8:	2304      	movs	r3, #4
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4815      	ldr	r0, [pc, #84]	@ (8002318 <HAL_I2C_MspInit+0xcc>)
 80022c4:	f000 fef2 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80022c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ce:	2312      	movs	r3, #18
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022da:	2304      	movs	r3, #4
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	480d      	ldr	r0, [pc, #52]	@ (800231c <HAL_I2C_MspInit+0xd0>)
 80022e6:	f000 fee1 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 80022f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_I2C_MspInit+0xc8>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	@ 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40005c00 	.word	0x40005c00
 8002314:	40023800 	.word	0x40023800
 8002318:	40020800 	.word	0x40020800
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b09a      	sub	sp, #104	@ 0x68
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800233c:	2230      	movs	r2, #48	@ 0x30
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fe61 	bl	8006008 <memset>
  if(hltdc->Instance==LTDC)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a81      	ldr	r2, [pc, #516]	@ (8002550 <HAL_LTDC_MspInit+0x230>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 80fa 	bne.w	8002546 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002352:	2308      	movs	r3, #8
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002356:	2332      	movs	r3, #50	@ 0x32
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800235a:	2302      	movs	r3, #2
 800235c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800235e:	2300      	movs	r3, #0
 8002360:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f8d4 	bl	8005514 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002372:	f7ff ff3d 	bl	80021f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	4a75      	ldr	r2, [pc, #468]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002380:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002384:	6453      	str	r3, [r2, #68]	@ 0x44
 8002386:	4b73      	ldr	r3, [pc, #460]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	4b6f      	ldr	r3, [pc, #444]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a6e      	ldr	r2, [pc, #440]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	4b68      	ldr	r3, [pc, #416]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a67      	ldr	r2, [pc, #412]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a60      	ldr	r2, [pc, #384]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b5e      	ldr	r3, [pc, #376]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a59      	ldr	r2, [pc, #356]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b57      	ldr	r3, [pc, #348]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b50      	ldr	r3, [pc, #320]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b4c      	ldr	r3, [pc, #304]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a4b      	ldr	r2, [pc, #300]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b49      	ldr	r3, [pc, #292]	@ (8002554 <HAL_LTDC_MspInit+0x234>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800243a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800243e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244c:	230e      	movs	r3, #14
 800244e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	@ (8002558 <HAL_LTDC_MspInit+0x238>)
 8002458:	f000 fe28 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800245c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002460:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800246e:	230e      	movs	r3, #14
 8002470:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002476:	4619      	mov	r1, r3
 8002478:	4838      	ldr	r0, [pc, #224]	@ (800255c <HAL_LTDC_MspInit+0x23c>)
 800247a:	f000 fe17 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800247e:	2303      	movs	r3, #3
 8002480:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800248e:	2309      	movs	r3, #9
 8002490:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002496:	4619      	mov	r1, r3
 8002498:	4831      	ldr	r0, [pc, #196]	@ (8002560 <HAL_LTDC_MspInit+0x240>)
 800249a:	f000 fe07 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800249e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80024a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024b0:	230e      	movs	r3, #14
 80024b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024b8:	4619      	mov	r1, r3
 80024ba:	4829      	ldr	r0, [pc, #164]	@ (8002560 <HAL_LTDC_MspInit+0x240>)
 80024bc:	f000 fdf6 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80024c0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80024c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024d2:	230e      	movs	r3, #14
 80024d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024da:	4619      	mov	r1, r3
 80024dc:	4821      	ldr	r0, [pc, #132]	@ (8002564 <HAL_LTDC_MspInit+0x244>)
 80024de:	f000 fde5 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80024e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80024e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024f4:	230e      	movs	r3, #14
 80024f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024fc:	4619      	mov	r1, r3
 80024fe:	481a      	ldr	r0, [pc, #104]	@ (8002568 <HAL_LTDC_MspInit+0x248>)
 8002500:	f000 fdd4 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002504:	2348      	movs	r3, #72	@ 0x48
 8002506:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002514:	230e      	movs	r3, #14
 8002516:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800251c:	4619      	mov	r1, r3
 800251e:	4813      	ldr	r0, [pc, #76]	@ (800256c <HAL_LTDC_MspInit+0x24c>)
 8002520:	f000 fdc4 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002524:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002528:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002536:	2309      	movs	r3, #9
 8002538:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800253a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800253e:	4619      	mov	r1, r3
 8002540:	4808      	ldr	r0, [pc, #32]	@ (8002564 <HAL_LTDC_MspInit+0x244>)
 8002542:	f000 fdb3 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	3768      	adds	r7, #104	@ 0x68
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40016800 	.word	0x40016800
 8002554:	40023800 	.word	0x40023800
 8002558:	40021400 	.word	0x40021400
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40021800 	.word	0x40021800
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00

08002570 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <HAL_RNG_MspInit+0x38>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10d      	bne.n	800259e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_RNG_MspInit+0x3c>)
 8002588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_RNG_MspInit+0x3c>)
 800258c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002590:	6353      	str	r3, [r2, #52]	@ 0x34
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RNG_MspInit+0x3c>)
 8002594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	50060800 	.word	0x50060800
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	@ (8002634 <HAL_SPI_MspInit+0x84>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12c      	bne.n	800262c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <HAL_SPI_MspInit+0x88>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <HAL_SPI_MspInit+0x88>)
 80025dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_SPI_MspInit+0x88>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_SPI_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <HAL_SPI_MspInit+0x88>)
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_SPI_MspInit+0x88>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800260a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800261c:	2305      	movs	r3, #5
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <HAL_SPI_MspInit+0x8c>)
 8002628:	f000 fd40 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	@ 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40015000 	.word	0x40015000
 8002638:	40023800 	.word	0x40023800
 800263c:	40021400 	.word	0x40021400

08002640 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_SPI_MspDeInit+0x30>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10a      	bne.n	8002668 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002652:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HAL_SPI_MspDeInit+0x34>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <HAL_SPI_MspDeInit+0x34>)
 8002658:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800265c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800265e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002662:	4805      	ldr	r0, [pc, #20]	@ (8002678 <HAL_SPI_MspDeInit+0x38>)
 8002664:	f000 fecc 	bl	8003400 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40015000 	.word	0x40015000
 8002674:	40023800 	.word	0x40023800
 8002678:	40021400 	.word	0x40021400

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <NMI_Handler+0x4>

08002684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <MemManage_Handler+0x4>

08002694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026cc:	f000 fbca 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 80026da:	f000 f9cb 	bl	8002a74 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80026de:	f000 f98b 	bl	80029f8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80026e2:	2202      	movs	r2, #2
 80026e4:	2103      	movs	r1, #3
 80026e6:	2082      	movs	r0, #130	@ 0x82
 80026e8:	f000 fa18 	bl	8002b1c <I2C3_Write>
    HAL_Delay(5);
 80026ec:	2005      	movs	r0, #5
 80026ee:	f000 fbd5 	bl	8002e9c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2103      	movs	r1, #3
 80026f6:	2082      	movs	r0, #130	@ 0x82
 80026f8:	f000 fa10 	bl	8002b1c <I2C3_Write>
    HAL_Delay(2);
 80026fc:	2002      	movs	r0, #2
 80026fe:	f000 fbcd 	bl	8002e9c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002702:	1cba      	adds	r2, r7, #2
 8002704:	2302      	movs	r3, #2
 8002706:	2100      	movs	r1, #0
 8002708:	2082      	movs	r0, #130	@ 0x82
 800270a:	f000 fa57 	bl	8002bbc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	b29a      	uxth	r2, r3
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4313      	orrs	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	f640 0211 	movw	r2, #2065	@ 0x811
 8002726:	4293      	cmp	r3, r2
 8002728:	d001      	beq.n	800272e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800272a:	2303      	movs	r3, #3
 800272c:	e075      	b.n	800281a <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800272e:	2202      	movs	r2, #2
 8002730:	2103      	movs	r1, #3
 8002732:	2082      	movs	r0, #130	@ 0x82
 8002734:	f000 f9f2 	bl	8002b1c <I2C3_Write>
    HAL_Delay(5);
 8002738:	2005      	movs	r0, #5
 800273a:	f000 fbaf 	bl	8002e9c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800273e:	2200      	movs	r2, #0
 8002740:	2103      	movs	r1, #3
 8002742:	2082      	movs	r0, #130	@ 0x82
 8002744:	f000 f9ea 	bl	8002b1c <I2C3_Write>
    HAL_Delay(2);
 8002748:	2002      	movs	r0, #2
 800274a:	f000 fba7 	bl	8002e9c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800274e:	2004      	movs	r0, #4
 8002750:	f000 f867 	bl	8002822 <STMPE811_Read>
 8002754:	4603      	mov	r3, r0
 8002756:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002758:	797b      	ldrb	r3, [r7, #5]
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002760:	797b      	ldrb	r3, [r7, #5]
 8002762:	461a      	mov	r2, r3
 8002764:	2104      	movs	r1, #4
 8002766:	2082      	movs	r0, #130	@ 0x82
 8002768:	f000 f9d8 	bl	8002b1c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800276c:	2004      	movs	r0, #4
 800276e:	f000 f858 	bl	8002822 <STMPE811_Read>
 8002772:	4603      	mov	r3, r0
 8002774:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002776:	797b      	ldrb	r3, [r7, #5]
 8002778:	f023 0302 	bic.w	r3, r3, #2
 800277c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800277e:	797b      	ldrb	r3, [r7, #5]
 8002780:	461a      	mov	r2, r3
 8002782:	2104      	movs	r1, #4
 8002784:	2082      	movs	r0, #130	@ 0x82
 8002786:	f000 f9c9 	bl	8002b1c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800278a:	2249      	movs	r2, #73	@ 0x49
 800278c:	2120      	movs	r1, #32
 800278e:	2082      	movs	r0, #130	@ 0x82
 8002790:	f000 f9c4 	bl	8002b1c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002794:	2002      	movs	r0, #2
 8002796:	f000 fb81 	bl	8002e9c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800279a:	2201      	movs	r2, #1
 800279c:	2121      	movs	r1, #33	@ 0x21
 800279e:	2082      	movs	r0, #130	@ 0x82
 80027a0:	f000 f9bc 	bl	8002b1c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80027a4:	2017      	movs	r0, #23
 80027a6:	f000 f83c 	bl	8002822 <STMPE811_Read>
 80027aa:	4603      	mov	r3, r0
 80027ac:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80027ae:	797b      	ldrb	r3, [r7, #5]
 80027b0:	f043 031e 	orr.w	r3, r3, #30
 80027b4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80027b6:	797b      	ldrb	r3, [r7, #5]
 80027b8:	461a      	mov	r2, r3
 80027ba:	2117      	movs	r1, #23
 80027bc:	2082      	movs	r0, #130	@ 0x82
 80027be:	f000 f9ad 	bl	8002b1c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80027c2:	229a      	movs	r2, #154	@ 0x9a
 80027c4:	2141      	movs	r1, #65	@ 0x41
 80027c6:	2082      	movs	r0, #130	@ 0x82
 80027c8:	f000 f9a8 	bl	8002b1c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80027cc:	2201      	movs	r2, #1
 80027ce:	214a      	movs	r1, #74	@ 0x4a
 80027d0:	2082      	movs	r0, #130	@ 0x82
 80027d2:	f000 f9a3 	bl	8002b1c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80027d6:	2201      	movs	r2, #1
 80027d8:	214b      	movs	r1, #75	@ 0x4b
 80027da:	2082      	movs	r0, #130	@ 0x82
 80027dc:	f000 f99e 	bl	8002b1c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80027e0:	2200      	movs	r2, #0
 80027e2:	214b      	movs	r1, #75	@ 0x4b
 80027e4:	2082      	movs	r0, #130	@ 0x82
 80027e6:	f000 f999 	bl	8002b1c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80027ea:	2201      	movs	r2, #1
 80027ec:	2156      	movs	r1, #86	@ 0x56
 80027ee:	2082      	movs	r0, #130	@ 0x82
 80027f0:	f000 f994 	bl	8002b1c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80027f4:	2201      	movs	r2, #1
 80027f6:	2158      	movs	r1, #88	@ 0x58
 80027f8:	2082      	movs	r0, #130	@ 0x82
 80027fa:	f000 f98f 	bl	8002b1c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80027fe:	2203      	movs	r2, #3
 8002800:	2140      	movs	r1, #64	@ 0x40
 8002802:	2082      	movs	r0, #130	@ 0x82
 8002804:	f000 f98a 	bl	8002b1c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002808:	22ff      	movs	r2, #255	@ 0xff
 800280a:	210b      	movs	r1, #11
 800280c:	2082      	movs	r0, #130	@ 0x82
 800280e:	f000 f985 	bl	8002b1c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);

    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002812:	20c8      	movs	r0, #200	@ 0xc8
 8002814:	f000 fb42 	bl	8002e9c <HAL_Delay>

    return STMPE811_State_Ok;
 8002818:	2302      	movs	r3, #2

}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800282c:	f107 020f 	add.w	r2, r7, #15
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4619      	mov	r1, r3
 8002834:	2082      	movs	r0, #130	@ 0x82
 8002836:	f000 f99b 	bl	8002b70 <I2C3_Read>

    return readData;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	791a      	ldrb	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002854:	2040      	movs	r0, #64	@ 0x40
 8002856:	f7ff ffe4 	bl	8002822 <STMPE811_Read>
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800285e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0e      	blt.n	8002884 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800286c:	2201      	movs	r2, #1
 800286e:	214b      	movs	r1, #75	@ 0x4b
 8002870:	2082      	movs	r0, #130	@ 0x82
 8002872:	f000 f953 	bl	8002b1c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002876:	2200      	movs	r2, #0
 8002878:	214b      	movs	r1, #75	@ 0x4b
 800287a:	2082      	movs	r0, #130	@ 0x82
 800287c:	f000 f94e 	bl	8002b1c <I2C3_Write>

        return STMPE811_State_Released;
 8002880:	2301      	movs	r3, #1
 8002882:	e0a7      	b.n	80029d4 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	799b      	ldrb	r3, [r3, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d117      	bne.n	80028bc <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f9b5 	bl	8002c00 <TM_STMPE811_ReadX>
 8002896:	4603      	mov	r3, r0
 8002898:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	885b      	ldrh	r3, [r3, #2]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa08 	bl	8002cbc <TM_STMPE811_ReadY>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80028b2:	3301      	adds	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	805a      	strh	r2, [r3, #2]
 80028ba:	e048      	b.n	800294e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	799b      	ldrb	r3, [r3, #6]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d112      	bne.n	80028ea <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f999 	bl	8002c00 <TM_STMPE811_ReadX>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	885b      	ldrh	r3, [r3, #2]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f9ee 	bl	8002cbc <TM_STMPE811_ReadY>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	805a      	strh	r2, [r3, #2]
 80028e8:	e031      	b.n	800294e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	799b      	ldrb	r3, [r3, #6]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d115      	bne.n	800291e <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	885b      	ldrh	r3, [r3, #2]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f982 	bl	8002c00 <TM_STMPE811_ReadX>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f9d7 	bl	8002cbc <TM_STMPE811_ReadY>
 800290e:	4603      	mov	r3, r0
 8002910:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002914:	3301      	adds	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	e017      	b.n	800294e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	799b      	ldrb	r3, [r3, #6]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d113      	bne.n	800294e <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f968 	bl	8002c00 <TM_STMPE811_ReadX>
 8002930:	4603      	mov	r3, r0
 8002932:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f9bb 	bl	8002cbc <TM_STMPE811_ReadY>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800294e:	2201      	movs	r2, #1
 8002950:	214b      	movs	r1, #75	@ 0x4b
 8002952:	2082      	movs	r0, #130	@ 0x82
 8002954:	f000 f8e2 	bl	8002b1c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002958:	2200      	movs	r2, #0
 800295a:	214b      	movs	r1, #75	@ 0x4b
 800295c:	2082      	movs	r0, #130	@ 0x82
 800295e:	f000 f8dd 	bl	8002b1c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	799b      	ldrb	r3, [r3, #6]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <STMPE811_ReadTouch+0x12e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	799b      	ldrb	r3, [r3, #6]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d115      	bne.n	800299e <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d027      	beq.n	80029ca <STMPE811_ReadTouch+0x186>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2bee      	cmp	r3, #238	@ 0xee
 8002980:	d823      	bhi.n	80029ca <STMPE811_ReadTouch+0x186>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	885b      	ldrh	r3, [r3, #2]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01f      	beq.n	80029ca <STMPE811_ReadTouch+0x186>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	885b      	ldrh	r3, [r3, #2]
 800298e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002992:	d81a      	bhi.n	80029ca <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800299a:	2300      	movs	r3, #0
 800299c:	e01a      	b.n	80029d4 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <STMPE811_ReadTouch+0x188>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80029ae:	d80d      	bhi.n	80029cc <STMPE811_ReadTouch+0x188>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	885b      	ldrh	r3, [r3, #2]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <STMPE811_ReadTouch+0x188>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	885b      	ldrh	r3, [r3, #2]
 80029bc:	2bee      	cmp	r3, #238	@ 0xee
 80029be:	d805      	bhi.n	80029cc <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e004      	b.n	80029d4 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80029ca:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <verifyHAL_I2C_IS_OKAY>:

#endif


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <verifyHAL_I2C_IS_OKAY+0x18>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20025d54 	.word	0x20025d54

080029f8 <I2C3_Init>:

static void I2C3_Init()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <I2C3_Init+0x6c>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <I2C3_Init+0x6c>)
 8002a08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <I2C3_Init+0x6c>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <I2C3_Init+0x70>)
 8002a1c:	4a13      	ldr	r2, [pc, #76]	@ (8002a6c <I2C3_Init+0x74>)
 8002a1e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <I2C3_Init+0x70>)
 8002a22:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <I2C3_Init+0x78>)
 8002a24:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <I2C3_Init+0x70>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <I2C3_Init+0x70>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <I2C3_Init+0x70>)
 8002a34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a38:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <I2C3_Init+0x70>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <I2C3_Init+0x70>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002a46:	4808      	ldr	r0, [pc, #32]	@ (8002a68 <I2C3_Init+0x70>)
 8002a48:	f000 fe14 	bl	8003674 <HAL_I2C_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <I2C3_Init+0x5e>
    }
    return;
 8002a5a:	bf00      	nop
}
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	20025d00 	.word	0x20025d00
 8002a6c:	40005c00 	.word	0x40005c00
 8002a70:	000186a0 	.word	0x000186a0

08002a74 <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <I2C3_MspInit+0x9c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <I2C3_MspInit+0x9c>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <I2C3_MspInit+0x9c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <I2C3_MspInit+0x9c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <I2C3_MspInit+0x9c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab6:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <I2C3_MspInit+0x9c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	4619      	mov	r1, r3
 8002ade:	480d      	ldr	r0, [pc, #52]	@ (8002b14 <I2C3_MspInit+0xa0>)
 8002ae0:	f000 fae4 	bl	80030ac <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aea:	2312      	movs	r3, #18
 8002aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002af6:	2304      	movs	r3, #4
 8002af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	4619      	mov	r1, r3
 8002b00:	4805      	ldr	r0, [pc, #20]	@ (8002b18 <I2C3_MspInit+0xa4>)
 8002b02:	f000 fad3 	bl	80030ac <HAL_GPIO_Init>

}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020000 	.word	0x40020000

08002b1c <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af04      	add	r7, sp, #16
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
 8002b26:	460b      	mov	r3, r1
 8002b28:	717b      	strb	r3, [r7, #5]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002b2e:	793b      	ldrb	r3, [r7, #4]
 8002b30:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002b32:	797b      	ldrb	r3, [r7, #5]
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	88f9      	ldrh	r1, [r7, #6]
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <I2C3_Write+0x48>)
 8002b3a:	9302      	str	r3, [sp, #8]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	f107 030f 	add.w	r3, r7, #15
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	4807      	ldr	r0, [pc, #28]	@ (8002b68 <I2C3_Write+0x4c>)
 8002b4a:	f000 fed7 	bl	80038fc <HAL_I2C_Mem_Write>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <I2C3_Write+0x50>)
 8002b54:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002b56:	f7ff ff41 	bl	80029dc <verifyHAL_I2C_IS_OKAY>
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	0003d090 	.word	0x0003d090
 8002b68:	20025d00 	.word	0x20025d00
 8002b6c:	20025d54 	.word	0x20025d54

08002b70 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af04      	add	r7, sp, #16
 8002b76:	4603      	mov	r3, r0
 8002b78:	603a      	str	r2, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	b299      	uxth	r1, r3
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <I2C3_Read+0x40>)
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2301      	movs	r3, #1
 8002b96:	4807      	ldr	r0, [pc, #28]	@ (8002bb4 <I2C3_Read+0x44>)
 8002b98:	f000 ffaa 	bl	8003af0 <HAL_I2C_Mem_Read>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <I2C3_Read+0x48>)
 8002ba2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ba4:	f7ff ff1a 	bl	80029dc <verifyHAL_I2C_IS_OKAY>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0003d090 	.word	0x0003d090
 8002bb4:	20025d00 	.word	0x20025d00
 8002bb8:	20025d54 	.word	0x20025d54

08002bbc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af04      	add	r7, sp, #16
 8002bc2:	603a      	str	r2, [r7, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	71bb      	strb	r3, [r7, #6]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	b299      	uxth	r1, r3
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <I2C3_MulitByteRead+0x3c>)
 8002bdc:	9302      	str	r3, [sp, #8]
 8002bde:	88bb      	ldrh	r3, [r7, #4]
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2301      	movs	r3, #1
 8002be8:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <I2C3_MulitByteRead+0x40>)
 8002bea:	f000 ff81 	bl	8003af0 <HAL_I2C_Mem_Read>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	0003d090 	.word	0x0003d090
 8002bfc:	20025d00 	.word	0x20025d00

08002c00 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002c0a:	204d      	movs	r0, #77	@ 0x4d
 8002c0c:	f7ff fe09 	bl	8002822 <STMPE811_Read>
 8002c10:	4603      	mov	r3, r0
 8002c12:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002c14:	204e      	movs	r0, #78	@ 0x4e
 8002c16:	f7ff fe04 	bl	8002822 <STMPE811_Read>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002c1e:	7a7b      	ldrb	r3, [r7, #9]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	7a3b      	ldrb	r3, [r7, #8]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c30:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c34:	4293      	cmp	r3, r2
 8002c36:	dc06      	bgt.n	8002c46 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002c38:	89fb      	ldrh	r3, [r7, #14]
 8002c3a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002c3e:	330c      	adds	r3, #12
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	81fb      	strh	r3, [r7, #14]
 8002c44:	e005      	b.n	8002c52 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c56:	4a18      	ldr	r2, [pc, #96]	@ (8002cb8 <TM_STMPE811_ReadX+0xb8>)
 8002c58:	fb82 1203 	smull	r1, r2, r2, r3
 8002c5c:	441a      	add	r2, r3
 8002c5e:	10d2      	asrs	r2, r2, #3
 8002c60:	17db      	asrs	r3, r3, #31
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6a:	2bef      	cmp	r3, #239	@ 0xef
 8002c6c:	dd02      	ble.n	8002c74 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002c6e:	23ef      	movs	r3, #239	@ 0xef
 8002c70:	81fb      	strh	r3, [r7, #14]
 8002c72:	e005      	b.n	8002c80 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002c74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da01      	bge.n	8002c80 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002c80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dd05      	ble.n	8002c96 <TM_STMPE811_ReadX+0x96>
 8002c8a:	89fa      	ldrh	r2, [r7, #14]
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	e004      	b.n	8002ca0 <TM_STMPE811_ReadX+0xa0>
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ca2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	dd01      	ble.n	8002cae <TM_STMPE811_ReadX+0xae>
        return val;
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	e000      	b.n	8002cb0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002cae:	88fb      	ldrh	r3, [r7, #6]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	88888889 	.word	0x88888889

08002cbc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002cc6:	204f      	movs	r0, #79	@ 0x4f
 8002cc8:	f7ff fdab 	bl	8002822 <STMPE811_Read>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002cd0:	2050      	movs	r0, #80	@ 0x50
 8002cd2:	f7ff fda6 	bl	8002822 <STMPE811_Read>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002cda:	7a7b      	ldrb	r3, [r7, #9]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	b21a      	sxth	r2, r3
 8002ce0:	7a3b      	ldrb	r3, [r7, #8]
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002ce8:	89fb      	ldrh	r3, [r7, #14]
 8002cea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002cf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cf6:	4a19      	ldr	r2, [pc, #100]	@ (8002d5c <TM_STMPE811_ReadY+0xa0>)
 8002cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfc:	1052      	asrs	r2, r2, #1
 8002cfe:	17db      	asrs	r3, r3, #31
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	dc02      	bgt.n	8002d12 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	81fb      	strh	r3, [r7, #14]
 8002d10:	e007      	b.n	8002d22 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d16:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d1a:	db02      	blt.n	8002d22 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002d1c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002d20:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002d22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dd05      	ble.n	8002d38 <TM_STMPE811_ReadY+0x7c>
 8002d2c:	89fa      	ldrh	r2, [r7, #14]
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	e004      	b.n	8002d42 <TM_STMPE811_ReadY+0x86>
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002d44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	dd01      	ble.n	8002d50 <TM_STMPE811_ReadY+0x94>
        return val;
 8002d4c:	89fb      	ldrh	r3, [r7, #14]
 8002d4e:	e000      	b.n	8002d52 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002d50:	88fb      	ldrh	r3, [r7, #6]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2e8ba2e9 	.word	0x2e8ba2e9

08002d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d70:	f7ff fff6 	bl	8002d60 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d76:	490d      	ldr	r1, [pc, #52]	@ (8002dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d9a:	f003 f93d 	bl	8006018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9e:	f7ff f8e7 	bl	8001f70 <main>
  bx  lr    
 8002da2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002da4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002db0:	080072d8 	.word	0x080072d8
  ldr r2, =_sbss
 8002db4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002db8:	20025d5c 	.word	0x20025d5c

08002dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <ADC_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <HAL_Init+0x40>)
 8002dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <HAL_Init+0x40>)
 8002dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	@ (8002e00 <HAL_Init+0x40>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f000 f92b 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f000 f808 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7ff fa02 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <HAL_InitTick+0x54>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <HAL_InitTick+0x58>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f935 	bl	8003092 <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00e      	b.n	8002e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d80a      	bhi.n	8002e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f000 f90b 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e44:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <HAL_InitTick+0x5c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200001d0 	.word	0x200001d0
 8002e5c:	200001d8 	.word	0x200001d8
 8002e60:	200001d4 	.word	0x200001d4

08002e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_IncTick+0x1c>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_IncTick+0x20>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a03      	ldr	r2, [pc, #12]	@ (8002e84 <HAL_IncTick+0x20>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	200001d8 	.word	0x200001d8
 8002e84:	20025d58 	.word	0x20025d58

08002e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e8c:	4b02      	ldr	r3, [pc, #8]	@ (8002e98 <HAL_GetTick+0x10>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	20025d58 	.word	0x20025d58

08002e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea4:	f7ff fff0 	bl	8002e88 <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d005      	beq.n	8002ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <HAL_Delay+0x44>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ec2:	bf00      	nop
 8002ec4:	f7ff ffe0 	bl	8002e88 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f7      	bhi.n	8002ec4 <HAL_Delay+0x28>
  {
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200001d8 	.word	0x200001d8

08002ee4 <__NVIC_SetPriorityGrouping>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	@ (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	@ 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff90 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff49 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff5e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff90 	bl	8002f9c <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5f 	bl	8002f48 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ffb0 	bl	8003000 <SysTick_Config>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	@ 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e177      	b.n	80033b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c8:	2201      	movs	r2, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	f040 8166 	bne.w	80033b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d005      	beq.n	80030fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d130      	bne.n	8003160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 0201 	and.w	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b03      	cmp	r3, #3
 800316a:	d017      	beq.n	800319c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d123      	bne.n	80031f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3208      	adds	r2, #8
 80031b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	220f      	movs	r2, #15
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	69b9      	ldr	r1, [r7, #24]
 80031ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0203 	and.w	r2, r3, #3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80c0 	beq.w	80033b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b65      	ldr	r3, [pc, #404]	@ (80033cc <HAL_GPIO_Init+0x320>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	4a64      	ldr	r2, [pc, #400]	@ (80033cc <HAL_GPIO_Init+0x320>)
 800323c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003240:	6453      	str	r3, [r2, #68]	@ 0x44
 8003242:	4b62      	ldr	r3, [pc, #392]	@ (80033cc <HAL_GPIO_Init+0x320>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800324e:	4a60      	ldr	r2, [pc, #384]	@ (80033d0 <HAL_GPIO_Init+0x324>)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a57      	ldr	r2, [pc, #348]	@ (80033d4 <HAL_GPIO_Init+0x328>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d037      	beq.n	80032ea <HAL_GPIO_Init+0x23e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a56      	ldr	r2, [pc, #344]	@ (80033d8 <HAL_GPIO_Init+0x32c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d031      	beq.n	80032e6 <HAL_GPIO_Init+0x23a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a55      	ldr	r2, [pc, #340]	@ (80033dc <HAL_GPIO_Init+0x330>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02b      	beq.n	80032e2 <HAL_GPIO_Init+0x236>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a54      	ldr	r2, [pc, #336]	@ (80033e0 <HAL_GPIO_Init+0x334>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d025      	beq.n	80032de <HAL_GPIO_Init+0x232>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a53      	ldr	r2, [pc, #332]	@ (80033e4 <HAL_GPIO_Init+0x338>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <HAL_GPIO_Init+0x22e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a52      	ldr	r2, [pc, #328]	@ (80033e8 <HAL_GPIO_Init+0x33c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x22a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a51      	ldr	r2, [pc, #324]	@ (80033ec <HAL_GPIO_Init+0x340>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x226>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a50      	ldr	r2, [pc, #320]	@ (80033f0 <HAL_GPIO_Init+0x344>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x222>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4f      	ldr	r2, [pc, #316]	@ (80033f4 <HAL_GPIO_Init+0x348>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x21e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4e      	ldr	r2, [pc, #312]	@ (80033f8 <HAL_GPIO_Init+0x34c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x21a>
 80032c2:	2309      	movs	r3, #9
 80032c4:	e012      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032c6:	230a      	movs	r3, #10
 80032c8:	e010      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032ca:	2308      	movs	r3, #8
 80032cc:	e00e      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e00c      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032d2:	2306      	movs	r3, #6
 80032d4:	e00a      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032d6:	2305      	movs	r3, #5
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032da:	2304      	movs	r3, #4
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032ea:	2300      	movs	r3, #0
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f002 0203 	and.w	r2, r2, #3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fc:	4934      	ldr	r1, [pc, #208]	@ (80033d0 <HAL_GPIO_Init+0x324>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330a:	4b3c      	ldr	r3, [pc, #240]	@ (80033fc <HAL_GPIO_Init+0x350>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332e:	4a33      	ldr	r2, [pc, #204]	@ (80033fc <HAL_GPIO_Init+0x350>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_GPIO_Init+0x350>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003358:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <HAL_GPIO_Init+0x350>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800335e:	4b27      	ldr	r3, [pc, #156]	@ (80033fc <HAL_GPIO_Init+0x350>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003382:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_GPIO_Init+0x350>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003388:	4b1c      	ldr	r3, [pc, #112]	@ (80033fc <HAL_GPIO_Init+0x350>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ac:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <HAL_GPIO_Init+0x350>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f67f ae84 	bls.w	80030c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020c00 	.word	0x40020c00
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40021400 	.word	0x40021400
 80033ec:	40021800 	.word	0x40021800
 80033f0:	40021c00 	.word	0x40021c00
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40022400 	.word	0x40022400
 80033fc:	40013c00 	.word	0x40013c00

08003400 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e0d9      	b.n	80035d0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800341c:	2201      	movs	r2, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	f040 80c9 	bne.w	80035ca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003438:	4a6a      	ldr	r2, [pc, #424]	@ (80035e4 <HAL_GPIO_DeInit+0x1e4>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	220f      	movs	r2, #15
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a62      	ldr	r2, [pc, #392]	@ (80035e8 <HAL_GPIO_DeInit+0x1e8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d037      	beq.n	80034d2 <HAL_GPIO_DeInit+0xd2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a61      	ldr	r2, [pc, #388]	@ (80035ec <HAL_GPIO_DeInit+0x1ec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_GPIO_DeInit+0xce>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a60      	ldr	r2, [pc, #384]	@ (80035f0 <HAL_GPIO_DeInit+0x1f0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <HAL_GPIO_DeInit+0xca>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a5f      	ldr	r2, [pc, #380]	@ (80035f4 <HAL_GPIO_DeInit+0x1f4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d025      	beq.n	80034c6 <HAL_GPIO_DeInit+0xc6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a5e      	ldr	r2, [pc, #376]	@ (80035f8 <HAL_GPIO_DeInit+0x1f8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01f      	beq.n	80034c2 <HAL_GPIO_DeInit+0xc2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a5d      	ldr	r2, [pc, #372]	@ (80035fc <HAL_GPIO_DeInit+0x1fc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_DeInit+0xbe>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a5c      	ldr	r2, [pc, #368]	@ (8003600 <HAL_GPIO_DeInit+0x200>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_DeInit+0xba>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a5b      	ldr	r2, [pc, #364]	@ (8003604 <HAL_GPIO_DeInit+0x204>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_DeInit+0xb6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a5a      	ldr	r2, [pc, #360]	@ (8003608 <HAL_GPIO_DeInit+0x208>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_DeInit+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a59      	ldr	r2, [pc, #356]	@ (800360c <HAL_GPIO_DeInit+0x20c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_DeInit+0xae>
 80034aa:	2309      	movs	r3, #9
 80034ac:	e012      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034ae:	230a      	movs	r3, #10
 80034b0:	e010      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034b2:	2308      	movs	r3, #8
 80034b4:	e00e      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034b6:	2307      	movs	r3, #7
 80034b8:	e00c      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034ba:	2306      	movs	r3, #6
 80034bc:	e00a      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034be:	2305      	movs	r3, #5
 80034c0:	e008      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034c2:	2304      	movs	r3, #4
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e004      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_GPIO_DeInit+0xd4>
 80034d2:	2300      	movs	r3, #0
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	f002 0203 	and.w	r2, r2, #3
 80034da:	0092      	lsls	r2, r2, #2
 80034dc:	4093      	lsls	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d132      	bne.n	800354a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4948      	ldr	r1, [pc, #288]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034f2:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	4945      	ldr	r1, [pc, #276]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003500:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	4941      	ldr	r1, [pc, #260]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 800350a:	4013      	ands	r3, r2
 800350c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800350e:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	43db      	mvns	r3, r3
 8003516:	493e      	ldr	r1, [pc, #248]	@ (8003610 <HAL_GPIO_DeInit+0x210>)
 8003518:	4013      	ands	r3, r2
 800351a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800352c:	4a2d      	ldr	r2, [pc, #180]	@ (80035e4 <HAL_GPIO_DeInit+0x1e4>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3302      	adds	r3, #2
 8003534:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	43da      	mvns	r2, r3
 800353c:	4829      	ldr	r0, [pc, #164]	@ (80035e4 <HAL_GPIO_DeInit+0x1e4>)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	400a      	ands	r2, r1
 8003544:	3302      	adds	r3, #2
 8003546:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2103      	movs	r1, #3
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	08da      	lsrs	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3208      	adds	r2, #8
 8003568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	08d2      	lsrs	r2, r2, #3
 8003580:	4019      	ands	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2103      	movs	r1, #3
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2101      	movs	r1, #1
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2103      	movs	r1, #3
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	f67f af22 	bls.w	800341c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40021400 	.word	0x40021400
 8003600:	40021800 	.word	0x40021800
 8003604:	40021c00 	.word	0x40021c00
 8003608:	40022000 	.word	0x40022000
 800360c:	40022400 	.word	0x40022400
 8003610:	40013c00 	.word	0x40013c00

08003614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e001      	b.n	8003636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	807b      	strh	r3, [r7, #2]
 800364e:	4613      	mov	r3, r2
 8003650:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003652:	787b      	ldrb	r3, [r7, #1]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003658:	887a      	ldrh	r2, [r7, #2]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800365e:	e003      	b.n	8003668 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	041a      	lsls	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e12b      	b.n	80038de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fdd6 	bl	800224c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	@ 0x24
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d8:	f001 ff08 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80036dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a81      	ldr	r2, [pc, #516]	@ (80038e8 <HAL_I2C_Init+0x274>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d807      	bhi.n	80036f8 <HAL_I2C_Init+0x84>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a80      	ldr	r2, [pc, #512]	@ (80038ec <HAL_I2C_Init+0x278>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e006      	b.n	8003706 <HAL_I2C_Init+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a7d      	ldr	r2, [pc, #500]	@ (80038f0 <HAL_I2C_Init+0x27c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0e7      	b.n	80038de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a78      	ldr	r2, [pc, #480]	@ (80038f4 <HAL_I2C_Init+0x280>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a6a      	ldr	r2, [pc, #424]	@ (80038e8 <HAL_I2C_Init+0x274>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <HAL_I2C_Init+0xd4>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	e009      	b.n	800375c <HAL_I2C_Init+0xe8>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a69      	ldr	r2, [pc, #420]	@ (80038f8 <HAL_I2C_Init+0x284>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	3301      	adds	r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800376e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	495c      	ldr	r1, [pc, #368]	@ (80038e8 <HAL_I2C_Init+0x274>)
 8003778:	428b      	cmp	r3, r1
 800377a:	d819      	bhi.n	80037b0 <HAL_I2C_Init+0x13c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e59      	subs	r1, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fbb1 f3f3 	udiv	r3, r1, r3
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003790:	400b      	ands	r3, r1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_I2C_Init+0x138>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e59      	subs	r1, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037aa:	e051      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 80037ac:	2304      	movs	r3, #4
 80037ae:	e04f      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_I2C_Init+0x168>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e58      	subs	r0, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e012      	b.n	8003802 <HAL_I2C_Init+0x18e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e58      	subs	r0, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	0099      	lsls	r1, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Init+0x196>
 8003806:	2301      	movs	r3, #1
 8003808:	e022      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <HAL_I2C_Init+0x1bc>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e58      	subs	r0, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	440b      	add	r3, r1
 8003820:	fbb0 f3f3 	udiv	r3, r0, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800382e:	e00f      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	6809      	ldr	r1, [r1, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800387e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6911      	ldr	r1, [r2, #16]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	000186a0 	.word	0x000186a0
 80038ec:	001e847f 	.word	0x001e847f
 80038f0:	003d08ff 	.word	0x003d08ff
 80038f4:	431bde83 	.word	0x431bde83
 80038f8:	10624dd3 	.word	0x10624dd3

080038fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003916:	f7ff fab7 	bl	8002e88 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	f040 80d9 	bne.w	8003adc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2319      	movs	r3, #25
 8003930:	2201      	movs	r2, #1
 8003932:	496d      	ldr	r1, [pc, #436]	@ (8003ae8 <HAL_I2C_Mem_Write+0x1ec>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fc8b 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	e0cc      	b.n	8003ade <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_I2C_Mem_Write+0x56>
 800394e:	2302      	movs	r3, #2
 8003950:	e0c5      	b.n	8003ade <HAL_I2C_Mem_Write+0x1e2>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d007      	beq.n	8003978 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003986:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2221      	movs	r2, #33	@ 0x21
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2240      	movs	r2, #64	@ 0x40
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a4d      	ldr	r2, [pc, #308]	@ (8003aec <HAL_I2C_Mem_Write+0x1f0>)
 80039b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ba:	88f8      	ldrh	r0, [r7, #6]
 80039bc:	893a      	ldrh	r2, [r7, #8]
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4603      	mov	r3, r0
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fac2 	bl	8003f54 <I2C_RequestMemoryWrite>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d052      	beq.n	8003a7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e081      	b.n	8003ade <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fd50 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06b      	b.n	8003ade <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11b      	bne.n	8003a7c <HAL_I2C_Mem_Write+0x180>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1aa      	bne.n	80039da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fd43 	bl	8004514 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aaa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e016      	b.n	8003ade <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	00100002 	.word	0x00100002
 8003aec:	ffff0000 	.word	0xffff0000

08003af0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	@ 0x30
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b0a:	f7ff f9bd 	bl	8002e88 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	f040 8214 	bne.w	8003f46 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2319      	movs	r3, #25
 8003b24:	2201      	movs	r2, #1
 8003b26:	497b      	ldr	r1, [pc, #492]	@ (8003d14 <HAL_I2C_Mem_Read+0x224>)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fb91 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
 8003b36:	e207      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_I2C_Mem_Read+0x56>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e200      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d007      	beq.n	8003b6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2222      	movs	r2, #34	@ 0x22
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2240      	movs	r2, #64	@ 0x40
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a5b      	ldr	r2, [pc, #364]	@ (8003d18 <HAL_I2C_Mem_Read+0x228>)
 8003bac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bae:	88f8      	ldrh	r0, [r7, #6]
 8003bb0:	893a      	ldrh	r2, [r7, #8]
 8003bb2:	8979      	ldrh	r1, [r7, #10]
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fa5e 	bl	8004080 <I2C_RequestMemoryRead>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1bc      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e190      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d11b      	bne.n	8003c3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e170      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d11b      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	e150      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c94:	e144      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f200 80f1 	bhi.w	8003e82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d123      	bne.n	8003cf0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003caa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fc79 	bl	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e145      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cee:	e117      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d14e      	bne.n	8003d96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4906      	ldr	r1, [pc, #24]	@ (8003d1c <HAL_I2C_Mem_Read+0x22c>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 faa4 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e11a      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
 8003d12:	bf00      	nop
 8003d14:	00100002 	.word	0x00100002
 8003d18:	ffff0000 	.word	0xffff0000
 8003d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d94:	e0c4      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	496c      	ldr	r1, [pc, #432]	@ (8003f50 <HAL_I2C_Mem_Read+0x460>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa55 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cb      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4955      	ldr	r1, [pc, #340]	@ (8003f50 <HAL_I2C_Mem_Read+0x460>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fa27 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09d      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e80:	e04e      	b.n	8003f20 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fb8c 	bl	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e058      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d124      	bne.n	8003f20 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f aeb6 	bne.w	8003c96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3728      	adds	r7, #40	@ 0x28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	00010004 	.word	0x00010004

08003f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f960 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa4:	d103      	bne.n	8003fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e05f      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	492d      	ldr	r1, [pc, #180]	@ (800407c <I2C_RequestMemoryWrite+0x128>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f9bb 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04c      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa46 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e02b      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e021      	b.n	8004070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa20 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e005      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	893b      	ldrh	r3, [r7, #8]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	00010002 	.word	0x00010002

08004080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f8c2 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e0:	d103      	bne.n	80040ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0aa      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	4952      	ldr	r1, [pc, #328]	@ (800424c <I2C_RequestMemoryRead+0x1cc>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f91d 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e097      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6a39      	ldr	r1, [r7, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9a8 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e076      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415c:	893b      	ldrh	r3, [r7, #8]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e021      	b.n	80041ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f982 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e050      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ae:	6a39      	ldr	r1, [r7, #32]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f967 	bl	8004484 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d107      	bne.n	80041d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e035      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f82b 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420e:	d103      	bne.n	8004218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e013      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800421c:	897b      	ldrh	r3, [r7, #10]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	4906      	ldr	r1, [pc, #24]	@ (800424c <I2C_RequestMemoryRead+0x1cc>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f886 	bl	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010002 	.word	0x00010002

08004250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004260:	e048      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d044      	beq.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fe fe0d 	bl	8002e88 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d139      	bne.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10d      	bne.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	43da      	mvns	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	e00c      	b.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d116      	bne.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e023      	b.n	800433c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10d      	bne.n	800431a <I2C_WaitOnFlagUntilTimeout+0xca>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	43da      	mvns	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	e00c      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	429a      	cmp	r2, r3
 8004338:	d093      	beq.n	8004262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004352:	e071      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004362:	d123      	bne.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800437c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	f043 0204 	orr.w	r2, r3, #4
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e067      	b.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d041      	beq.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fe fd68 	bl	8002e88 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d136      	bne.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10c      	bne.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e00b      	b.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	43da      	mvns	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e021      	b.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d10c      	bne.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	43da      	mvns	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e00b      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f af6d 	bne.w	8004354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004490:	e034      	b.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f8e3 	bl	800465e <I2C_IsAcknowledgeFailed>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e034      	b.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d028      	beq.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fe fced 	bl	8002e88 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11d      	bne.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ca:	2b80      	cmp	r3, #128	@ 0x80
 80044cc:	d016      	beq.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e007      	b.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d1c3      	bne.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004520:	e034      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f89b 	bl	800465e <I2C_IsAcknowledgeFailed>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e034      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d028      	beq.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe fca5 	bl	8002e88 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11d      	bne.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d016      	beq.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e007      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d1c3      	bne.n	8004522 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b0:	e049      	b.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d119      	bne.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0210 	mvn.w	r2, #16
 80045c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e030      	b.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fe fc48 	bl	8002e88 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b40      	cmp	r3, #64	@ 0x40
 8004616:	d016      	beq.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e007      	b.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d1ae      	bne.n	80045b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004674:	d11b      	bne.n	80046ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800467e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f043 0204 	orr.w	r2, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0bf      	b.n	800484e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd fe1c 	bl	8002320 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80046fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6999      	ldr	r1, [r3, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004714:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b4a      	ldr	r3, [pc, #296]	@ (8004858 <HAL_LTDC_Init+0x19c>)
 8004730:	400b      	ands	r3, r1
 8004732:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6899      	ldr	r1, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68d9      	ldr	r1, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b3e      	ldr	r3, [pc, #248]	@ (8004858 <HAL_LTDC_Init+0x19c>)
 800475e:	400b      	ands	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68d9      	ldr	r1, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6919      	ldr	r1, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b33      	ldr	r3, [pc, #204]	@ (8004858 <HAL_LTDC_Init+0x19c>)
 800478c:	400b      	ands	r3, r1
 800478e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6919      	ldr	r1, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6959      	ldr	r1, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <HAL_LTDC_Init+0x19c>)
 80047ba:	400b      	ands	r3, r1
 80047bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6959      	ldr	r1, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0206 	orr.w	r2, r2, #6
 800482a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	f000f800 	.word	0xf000f800

0800485c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_LTDC_ConfigLayer+0x1a>
 8004872:	2302      	movs	r3, #2
 8004874:	e02c      	b.n	80048d0 <HAL_LTDC_ConfigLayer+0x74>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2134      	movs	r1, #52	@ 0x34
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4614      	mov	r4, r2
 800489a:	461d      	mov	r5, r3
 800489c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800489e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f811 	bl	80048d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2201      	movs	r2, #1
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bdb0      	pop	{r4, r5, r7, pc}

080048d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	@ 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f4:	4413      	add	r3, r2
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	4413      	add	r3, r2
 8004906:	3384      	adds	r3, #132	@ 0x84
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4611      	mov	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	01d2      	lsls	r2, r2, #7
 8004914:	440a      	add	r2, r1
 8004916:	3284      	adds	r2, #132	@ 0x84
 8004918:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800491c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800492e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004930:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	01db      	lsls	r3, r3, #7
 800493c:	440b      	add	r3, r1
 800493e:	3384      	adds	r3, #132	@ 0x84
 8004940:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004946:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004956:	4413      	add	r3, r2
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	01db      	lsls	r3, r3, #7
 8004966:	4413      	add	r3, r2
 8004968:	3384      	adds	r3, #132	@ 0x84
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	4611      	mov	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	01d2      	lsls	r2, r2, #7
 8004976:	440a      	add	r2, r1
 8004978:	3284      	adds	r2, #132	@ 0x84
 800497a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800497e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800498e:	4413      	add	r3, r2
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	01db      	lsls	r3, r3, #7
 800499c:	440b      	add	r3, r1
 800499e:	3384      	adds	r3, #132	@ 0x84
 80049a0:	4619      	mov	r1, r3
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	01db      	lsls	r3, r3, #7
 80049b2:	4413      	add	r3, r2
 80049b4:	3384      	adds	r3, #132	@ 0x84
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	4611      	mov	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	01d2      	lsls	r2, r2, #7
 80049c2:	440a      	add	r2, r1
 80049c4:	3284      	adds	r2, #132	@ 0x84
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4413      	add	r3, r2
 80049d8:	3384      	adds	r3, #132	@ 0x84
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	4413      	add	r3, r2
 8004a0a:	3384      	adds	r3, #132	@ 0x84
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	01db      	lsls	r3, r3, #7
 8004a18:	4413      	add	r3, r2
 8004a1a:	3384      	adds	r3, #132	@ 0x84
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a28:	461a      	mov	r2, r3
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4619      	mov	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3384      	adds	r3, #132	@ 0x84
 8004a40:	4619      	mov	r1, r3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	01db      	lsls	r3, r3, #7
 8004a52:	4413      	add	r3, r2
 8004a54:	3384      	adds	r3, #132	@ 0x84
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	01d2      	lsls	r2, r2, #7
 8004a62:	440a      	add	r2, r1
 8004a64:	3284      	adds	r2, #132	@ 0x84
 8004a66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a6a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	01db      	lsls	r3, r3, #7
 8004a76:	4413      	add	r3, r2
 8004a78:	3384      	adds	r3, #132	@ 0x84
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3384      	adds	r3, #132	@ 0x84
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	4611      	mov	r1, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	01d2      	lsls	r2, r2, #7
 8004a9c:	440a      	add	r2, r1
 8004a9e:	3284      	adds	r2, #132	@ 0x84
 8004aa0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004aa4:	f023 0307 	bic.w	r3, r3, #7
 8004aa8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	6809      	ldr	r1, [r1, #0]
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	01c9      	lsls	r1, r1, #7
 8004abc:	4401      	add	r1, r0
 8004abe:	3184      	adds	r1, #132	@ 0x84
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	01db      	lsls	r3, r3, #7
 8004ace:	4413      	add	r3, r2
 8004ad0:	3384      	adds	r3, #132	@ 0x84
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	01db      	lsls	r3, r3, #7
 8004ade:	4413      	add	r3, r2
 8004ae0:	3384      	adds	r3, #132	@ 0x84
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	01db      	lsls	r3, r3, #7
 8004af2:	4413      	add	r3, r2
 8004af4:	3384      	adds	r3, #132	@ 0x84
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004b06:	2304      	movs	r3, #4
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e01b      	b.n	8004b44 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d102      	bne.n	8004b1a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004b14:	2303      	movs	r3, #3
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e014      	b.n	8004b44 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00b      	beq.n	8004b3a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d007      	beq.n	8004b3a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d003      	beq.n	8004b3a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	d102      	bne.n	8004b40 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e001      	b.n	8004b44 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	01db      	lsls	r3, r3, #7
 8004b4e:	4413      	add	r3, r2
 8004b50:	3384      	adds	r3, #132	@ 0x84
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	01d2      	lsls	r2, r2, #7
 8004b5e:	440a      	add	r2, r1
 8004b60:	3284      	adds	r2, #132	@ 0x84
 8004b62:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	1acb      	subs	r3, r1, r3
 8004b7e:	69f9      	ldr	r1, [r7, #28]
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	6809      	ldr	r1, [r1, #0]
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	01c9      	lsls	r1, r1, #7
 8004b90:	4401      	add	r1, r0
 8004b92:	3184      	adds	r1, #132	@ 0x84
 8004b94:	4313      	orrs	r3, r2
 8004b96:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	01db      	lsls	r3, r3, #7
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3384      	adds	r3, #132	@ 0x84
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	4611      	mov	r1, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	01d2      	lsls	r2, r2, #7
 8004bb2:	440a      	add	r2, r1
 8004bb4:	3284      	adds	r2, #132	@ 0x84
 8004bb6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4413      	add	r3, r2
 8004bcc:	3384      	adds	r3, #132	@ 0x84
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	4413      	add	r3, r2
 8004be2:	3384      	adds	r3, #132	@ 0x84
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	4611      	mov	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	01d2      	lsls	r2, r2, #7
 8004bf0:	440a      	add	r2, r1
 8004bf2:	3284      	adds	r2, #132	@ 0x84
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6013      	str	r3, [r2, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	3724      	adds	r7, #36	@ 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e267      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c22:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b85      	ldr	r3, [pc, #532]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b7e      	ldr	r3, [pc, #504]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e242      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6f      	ldr	r2, [pc, #444]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6c      	ldr	r2, [pc, #432]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe f8e4 	bl	8002e88 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe f8e0 	bl	8002e88 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	@ 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e207      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe f8d0 	bl	8002e88 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe f8cc 	bl	8002e88 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	@ 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1f3      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1c7      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4937      	ldr	r1, [pc, #220]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe f885 	bl	8002e88 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fe f881 	bl	8002e88 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1a8      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4925      	ldr	r1, [pc, #148]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe f864 	bl	8002e88 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fe f860 	bl	8002e88 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e187      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d036      	beq.n	8004e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe f844 	bl	8002e88 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe f840 	bl	8002e88 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e167      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e01b      	b.n	8004e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fe f82d 	bl	8002e88 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e00e      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fe f829 	bl	8002e88 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d907      	bls.n	8004e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e150      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470000 	.word	0x42470000
 8004e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	4b88      	ldr	r3, [pc, #544]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ea      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8097 	beq.w	8004f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b81      	ldr	r3, [pc, #516]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	4a7c      	ldr	r2, [pc, #496]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b77      	ldr	r3, [pc, #476]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d118      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea6:	4b74      	ldr	r3, [pc, #464]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a73      	ldr	r2, [pc, #460]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd ffe9 	bl	8002e88 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eba:	f7fd ffe5 	bl	8002e88 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e10c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x2ea>
 8004ee0:	4b64      	ldr	r3, [pc, #400]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a63      	ldr	r2, [pc, #396]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eec:	e01c      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x30c>
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	4a5e      	ldr	r2, [pc, #376]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f02:	4b5c      	ldr	r3, [pc, #368]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	4a5b      	ldr	r2, [pc, #364]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004f10:	4b58      	ldr	r3, [pc, #352]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a57      	ldr	r2, [pc, #348]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1c:	4b55      	ldr	r3, [pc, #340]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	4a54      	ldr	r2, [pc, #336]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f22:	f023 0304 	bic.w	r3, r3, #4
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd ffaa 	bl	8002e88 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fd ffa6 	bl	8002e88 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0cb      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	4b49      	ldr	r3, [pc, #292]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ee      	beq.n	8004f38 <HAL_RCC_OscConfig+0x334>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5c:	f7fd ff94 	bl	8002e88 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fd ff90 	bl	8002e88 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0b5      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ee      	bne.n	8004f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b39      	ldr	r3, [pc, #228]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	4a38      	ldr	r2, [pc, #224]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a1 	beq.w	80050e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa2:	4b34      	ldr	r3, [pc, #208]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d05c      	beq.n	8005068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d141      	bne.n	800503a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb6:	4b31      	ldr	r3, [pc, #196]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fd ff64 	bl	8002e88 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fd ff60 	bl	8002e88 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e087      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	491b      	ldr	r1, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fd ff39 	bl	8002e88 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501a:	f7fd ff35 	bl	8002e88 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e05c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x416>
 8005038:	e054      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fd ff22 	bl	8002e88 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd ff1e 	bl	8002e88 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e045      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x444>
 8005066:	e03d      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e038      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8005074:	40023800 	.word	0x40023800
 8005078:	40007000 	.word	0x40007000
 800507c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005080:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d028      	beq.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d121      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d11a      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d111      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0cc      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b68      	ldr	r3, [pc, #416]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90c      	bls.n	8005130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b65      	ldr	r3, [pc, #404]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a52      	ldr	r2, [pc, #328]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800516a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3f      	ldr	r3, [pc, #252]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b3b      	ldr	r3, [pc, #236]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e067      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4934      	ldr	r1, [pc, #208]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fd fe50 	bl	8002e88 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fd fe4c 	bl	8002e88 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d20c      	bcs.n	800523c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fdb2 	bl	8002e04 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	08007288 	.word	0x08007288
 80052b8:	200001d0 	.word	0x200001d0
 80052bc:	200001d4 	.word	0x200001d4

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b094      	sub	sp, #80	@ 0x50
 80052c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80052cc:	2300      	movs	r3, #0
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d0:	2300      	movs	r3, #0
 80052d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d8:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x20c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d00d      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x40>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	f200 80e7 	bhi.w	80054b8 <HAL_RCC_GetSysClockFreq+0x1f8>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x3a>
 80052f2:	e0e1      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b76      	ldr	r3, [pc, #472]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x210>)
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80052f8:	e0e1      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fa:	4b76      	ldr	r3, [pc, #472]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x214>)
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052fe:	e0de      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005300:	4b72      	ldr	r3, [pc, #456]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x20c>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530a:	4b70      	ldr	r3, [pc, #448]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x20c>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d065      	beq.n	80053e2 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005316:	4b6d      	ldr	r3, [pc, #436]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x20c>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	2200      	movs	r2, #0
 800531e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
 800532e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f04f 0000 	mov.w	r0, #0
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	0159      	lsls	r1, r3, #5
 8005340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005344:	0150      	lsls	r0, r2, #5
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4621      	mov	r1, r4
 800534c:	1a51      	subs	r1, r2, r1
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	4629      	mov	r1, r5
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005364:	4659      	mov	r1, fp
 8005366:	018b      	lsls	r3, r1, #6
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800536e:	4651      	mov	r1, sl
 8005370:	018a      	lsls	r2, r1, #6
 8005372:	46d4      	mov	ip, sl
 8005374:	ebb2 080c 	subs.w	r8, r2, ip
 8005378:	4659      	mov	r1, fp
 800537a:	eb63 0901 	sbc.w	r9, r3, r1
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4623      	mov	r3, r4
 8005398:	eb18 0303 	adds.w	r3, r8, r3
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	462b      	mov	r3, r5
 80053a0:	eb49 0303 	adc.w	r3, r9, r3
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053b2:	4629      	mov	r1, r5
 80053b4:	024b      	lsls	r3, r1, #9
 80053b6:	4620      	mov	r0, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	4604      	mov	r4, r0
 80053bc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80053c0:	4601      	mov	r1, r0
 80053c2:	024a      	lsls	r2, r1, #9
 80053c4:	4610      	mov	r0, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ca:	2200      	movs	r2, #0
 80053cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053d4:	f7fa ff0a 	bl	80001ec <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4613      	mov	r3, r2
 80053de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e0:	e05c      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e2:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x20c>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	2200      	movs	r2, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	4611      	mov	r1, r2
 80053ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	2300      	movs	r3, #0
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	f04f 0000 	mov.w	r0, #0
 8005404:	f04f 0100 	mov.w	r1, #0
 8005408:	0159      	lsls	r1, r3, #5
 800540a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540e:	0150      	lsls	r0, r2, #5
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	46c4      	mov	ip, r8
 8005416:	ebb2 0a0c 	subs.w	sl, r2, ip
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	468c      	mov	ip, r1
 8005420:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005438:	ebb2 040a 	subs.w	r4, r2, sl
 800543c:	eb63 050b 	sbc.w	r5, r3, fp
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	00eb      	lsls	r3, r5, #3
 800544a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544e:	00e2      	lsls	r2, r4, #3
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	4603      	mov	r3, r0
 8005456:	18e3      	adds	r3, r4, r3
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	460b      	mov	r3, r1
 800545c:	eb45 0303 	adc.w	r3, r5, r3
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	4604      	mov	r4, r0
 8005478:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800547c:	4601      	mov	r1, r0
 800547e:	028a      	lsls	r2, r1, #10
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005486:	2200      	movs	r2, #0
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	61fa      	str	r2, [r7, #28]
 800548c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005490:	f7fa feac 	bl	80001ec <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4613      	mov	r3, r2
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800549c:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x20c>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	3301      	adds	r3, #1
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054b6:	e002      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x210>)
 80054ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3750      	adds	r7, #80	@ 0x50
 80054c4:	46bd      	mov	sp, r7
 80054c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800
 80054d0:	00f42400 	.word	0x00f42400
 80054d4:	007a1200 	.word	0x007a1200

080054d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054dc:	4b02      	ldr	r3, [pc, #8]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	200001d0 	.word	0x200001d0

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff2 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	08007298 	.word	0x08007298

08005514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005544:	2b00      	cmp	r3, #0
 8005546:	d075      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005548:	4b91      	ldr	r3, [pc, #580]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800554e:	f7fd fc9b 	bl	8002e88 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005556:	f7fd fc97 	bl	8002e88 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e189      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005568:	4b8a      	ldr	r3, [pc, #552]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	019a      	lsls	r2, r3, #6
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	071b      	lsls	r3, r3, #28
 800558c:	4981      	ldr	r1, [pc, #516]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01f      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055a0:	4b7c      	ldr	r3, [pc, #496]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a6:	0f1b      	lsrs	r3, r3, #28
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	019a      	lsls	r2, r3, #6
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	061b      	lsls	r3, r3, #24
 80055ba:	431a      	orrs	r2, r3
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	071b      	lsls	r3, r3, #28
 80055c0:	4974      	ldr	r1, [pc, #464]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055c8:	4b72      	ldr	r3, [pc, #456]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ce:	f023 021f 	bic.w	r2, r3, #31
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	496e      	ldr	r1, [pc, #440]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	019a      	lsls	r2, r3, #6
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	071b      	lsls	r3, r3, #28
 8005600:	4964      	ldr	r1, [pc, #400]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005608:	4b61      	ldr	r3, [pc, #388]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800560e:	f7fd fc3b 	bl	8002e88 <HAL_GetTick>
 8005612:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005616:	f7fd fc37 	bl	8002e88 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e129      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005628:	4b5a      	ldr	r3, [pc, #360]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005648:	2b00      	cmp	r3, #0
 800564a:	d079      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800564c:	4b52      	ldr	r3, [pc, #328]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005652:	f7fd fc19 	bl	8002e88 <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005658:	e008      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800565a:	f7fd fc15 	bl	8002e88 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e107      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800566c:	4b49      	ldr	r3, [pc, #292]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005678:	d0ef      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005686:	4b43      	ldr	r3, [pc, #268]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	0f1b      	lsrs	r3, r3, #28
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	019a      	lsls	r2, r3, #6
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	431a      	orrs	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	071b      	lsls	r3, r3, #28
 80056a6:	493b      	ldr	r1, [pc, #236]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056ae:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	3b01      	subs	r3, #1
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	4934      	ldr	r1, [pc, #208]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	0e1b      	lsrs	r3, r3, #24
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	019a      	lsls	r2, r3, #6
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	071b      	lsls	r3, r3, #28
 80056f4:	4927      	ldr	r1, [pc, #156]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056fc:	4b25      	ldr	r3, [pc, #148]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005702:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	4922      	ldr	r1, [pc, #136]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005712:	4b21      	ldr	r3, [pc, #132]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005718:	f7fd fbb6 	bl	8002e88 <HAL_GetTick>
 800571c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005720:	f7fd fbb2 	bl	8002e88 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0a4      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005732:	4b18      	ldr	r3, [pc, #96]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800573a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800573e:	d1ef      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 808b 	beq.w	8005864 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	4a0f      	ldr	r2, [pc, #60]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800575c:	6413      	str	r3, [r2, #64]	@ 0x40
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800576a:	4b0c      	ldr	r3, [pc, #48]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a0b      	ldr	r2, [pc, #44]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005774:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005776:	f7fd fb87 	bl	8002e88 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800577c:	e010      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800577e:	f7fd fb83 	bl	8002e88 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d909      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e075      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005790:	42470068 	.word	0x42470068
 8005794:	40023800 	.word	0x40023800
 8005798:	42470070 	.word	0x42470070
 800579c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a0:	4b38      	ldr	r3, [pc, #224]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0e8      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02f      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d028      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057d4:	4b2d      	ldr	r3, [pc, #180]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057da:	4b2c      	ldr	r3, [pc, #176]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057e0:	4a29      	ldr	r2, [pc, #164]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057e6:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d114      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057f2:	f7fd fb49 	bl	8002e88 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f8:	e00a      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fa:	f7fd fb45 	bl	8002e88 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e035      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005810:	4b1d      	ldr	r3, [pc, #116]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0ee      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005828:	d10d      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800582a:	4b17      	ldr	r3, [pc, #92]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800583a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583e:	4912      	ldr	r1, [pc, #72]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]
 8005844:	e005      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005846:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800584c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005854:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585e:	490a      	ldr	r1, [pc, #40]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005860:	4313      	orrs	r3, r2
 8005862:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005878:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40007000 	.word	0x40007000
 8005888:	40023800 	.word	0x40023800
 800588c:	42470e40 	.word	0x42470e40
 8005890:	424711e0 	.word	0x424711e0

08005894 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e01c      	b.n	80058e0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	795b      	ldrb	r3, [r3, #5]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc fe5a 	bl	8002570 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0204 	orr.w	r2, r2, #4
 80058d0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_RNG_GenerateRandomNumber+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e044      	b.n	800598c <HAL_RNG_GenerateRandomNumber+0xa4>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	795b      	ldrb	r3, [r3, #5]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d133      	bne.n	800597a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005918:	f7fd fab6 	bl	8002e88 <HAL_GetTick>
 800591c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800591e:	e018      	b.n	8005952 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005920:	f7fd fab2 	bl	8002e88 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d911      	bls.n	8005952 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d00a      	beq.n	8005952 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e01c      	b.n	800598c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b01      	cmp	r3, #1
 800595e:	d1df      	bne.n	8005920 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	715a      	strb	r2, [r3, #5]
 8005978:	e004      	b.n	8005984 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2204      	movs	r2, #4
 800597e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	711a      	strb	r2, [r3, #4]

  return status;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07b      	b.n	8005a9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d108      	bne.n	80059c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b6:	d009      	beq.n	80059cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
 80059be:	e005      	b.n	80059cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fde2 	bl	80025b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	ea42 0103 	orr.w	r1, r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	f003 0104 	and.w	r1, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0210 	and.w	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e01a      	b.n	8005aee <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ace:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fc fdb5 	bl	8002640 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_SPI_Transmit+0x22>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e12d      	b.n	8005d74 <HAL_SPI_Transmit+0x27e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b20:	f7fd f9b2 	bl	8002e88 <HAL_GetTick>
 8005b24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b3a:	e116      	b.n	8005d6a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_SPI_Transmit+0x52>
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b4c:	e10d      	b.n	8005d6a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2203      	movs	r2, #3
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b94:	d10f      	bne.n	8005bb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b40      	cmp	r3, #64	@ 0x40
 8005bc2:	d007      	beq.n	8005bd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bdc:	d14f      	bne.n	8005c7e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_Transmit+0xf6>
 8005be6:	8afb      	ldrh	r3, [r7, #22]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d142      	bne.n	8005c72 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	1c9a      	adds	r2, r3, #2
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c10:	e02f      	b.n	8005c72 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d112      	bne.n	8005c46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c24:	881a      	ldrh	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c44:	e015      	b.n	8005c72 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c46:	f7fd f91f 	bl	8002e88 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d803      	bhi.n	8005c5e <HAL_SPI_Transmit+0x168>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d102      	bne.n	8005c64 <HAL_SPI_Transmit+0x16e>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005c70:	e07b      	b.n	8005d6a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1ca      	bne.n	8005c12 <HAL_SPI_Transmit+0x11c>
 8005c7c:	e050      	b.n	8005d20 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_SPI_Transmit+0x196>
 8005c86:	8afb      	ldrh	r3, [r7, #22]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d144      	bne.n	8005d16 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cb2:	e030      	b.n	8005d16 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d113      	bne.n	8005cea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ce8:	e015      	b.n	8005d16 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cea:	f7fd f8cd 	bl	8002e88 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d803      	bhi.n	8005d02 <HAL_SPI_Transmit+0x20c>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d102      	bne.n	8005d08 <HAL_SPI_Transmit+0x212>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d14:	e029      	b.n	8005d6a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1c9      	bne.n	8005cb4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f8bf 	bl	8005ea8 <SPI_EndRxTxTransaction>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e003      	b.n	8005d6a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d8a:	b2db      	uxtb	r3, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr
	...

08005d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005da8:	f7fd f86e 	bl	8002e88 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005db8:	f7fd f866 	bl	8002e88 <HAL_GetTick>
 8005dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dbe:	4b39      	ldr	r3, [pc, #228]	@ (8005ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	015b      	lsls	r3, r3, #5
 8005dc4:	0d1b      	lsrs	r3, r3, #20
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dce:	e054      	b.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d050      	beq.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd8:	f7fd f856 	bl	8002e88 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d902      	bls.n	8005dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d13d      	bne.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e06:	d111      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e10:	d004      	beq.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1a:	d107      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e34:	d10f      	bne.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e017      	b.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d19b      	bne.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200001d0 	.word	0x200001d0

08005ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff ff6a 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e032      	b.n	8005f40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eda:	4b1b      	ldr	r3, [pc, #108]	@ (8005f48 <SPI_EndRxTxTransaction+0xa0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1b      	ldr	r2, [pc, #108]	@ (8005f4c <SPI_EndRxTxTransaction+0xa4>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	0d5b      	lsrs	r3, r3, #21
 8005ee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef8:	d112      	bne.n	8005f20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2200      	movs	r2, #0
 8005f02:	2180      	movs	r1, #128	@ 0x80
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff ff47 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d016      	beq.n	8005f3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e00f      	b.n	8005f40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f36:	2b80      	cmp	r3, #128	@ 0x80
 8005f38:	d0f2      	beq.n	8005f20 <SPI_EndRxTxTransaction+0x78>
 8005f3a:	e000      	b.n	8005f3e <SPI_EndRxTxTransaction+0x96>
        break;
 8005f3c:	bf00      	nop
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	200001d0 	.word	0x200001d0
 8005f4c:	165e9f81 	.word	0x165e9f81

08005f50 <__itoa>:
 8005f50:	1e93      	subs	r3, r2, #2
 8005f52:	2b22      	cmp	r3, #34	@ 0x22
 8005f54:	b510      	push	{r4, lr}
 8005f56:	460c      	mov	r4, r1
 8005f58:	d904      	bls.n	8005f64 <__itoa+0x14>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	700b      	strb	r3, [r1, #0]
 8005f5e:	461c      	mov	r4, r3
 8005f60:	4620      	mov	r0, r4
 8005f62:	bd10      	pop	{r4, pc}
 8005f64:	2a0a      	cmp	r2, #10
 8005f66:	d109      	bne.n	8005f7c <__itoa+0x2c>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	da07      	bge.n	8005f7c <__itoa+0x2c>
 8005f6c:	232d      	movs	r3, #45	@ 0x2d
 8005f6e:	700b      	strb	r3, [r1, #0]
 8005f70:	4240      	negs	r0, r0
 8005f72:	2101      	movs	r1, #1
 8005f74:	4421      	add	r1, r4
 8005f76:	f000 f805 	bl	8005f84 <__utoa>
 8005f7a:	e7f1      	b.n	8005f60 <__itoa+0x10>
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	e7f9      	b.n	8005f74 <__itoa+0x24>

08005f80 <itoa>:
 8005f80:	f7ff bfe6 	b.w	8005f50 <__itoa>

08005f84 <__utoa>:
 8005f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f86:	4c1f      	ldr	r4, [pc, #124]	@ (8006004 <__utoa+0x80>)
 8005f88:	b08b      	sub	sp, #44	@ 0x2c
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	466e      	mov	r6, sp
 8005f90:	f104 0c20 	add.w	ip, r4, #32
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	6861      	ldr	r1, [r4, #4]
 8005f98:	4637      	mov	r7, r6
 8005f9a:	c703      	stmia	r7!, {r0, r1}
 8005f9c:	3408      	adds	r4, #8
 8005f9e:	4564      	cmp	r4, ip
 8005fa0:	463e      	mov	r6, r7
 8005fa2:	d1f7      	bne.n	8005f94 <__utoa+0x10>
 8005fa4:	7921      	ldrb	r1, [r4, #4]
 8005fa6:	7139      	strb	r1, [r7, #4]
 8005fa8:	1e91      	subs	r1, r2, #2
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	6038      	str	r0, [r7, #0]
 8005fae:	2922      	cmp	r1, #34	@ 0x22
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	d904      	bls.n	8005fc0 <__utoa+0x3c>
 8005fb6:	7019      	strb	r1, [r3, #0]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	b00b      	add	sp, #44	@ 0x2c
 8005fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc0:	1e58      	subs	r0, r3, #1
 8005fc2:	4684      	mov	ip, r0
 8005fc4:	fbb5 f7f2 	udiv	r7, r5, r2
 8005fc8:	fb02 5617 	mls	r6, r2, r7, r5
 8005fcc:	3628      	adds	r6, #40	@ 0x28
 8005fce:	446e      	add	r6, sp
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005fd6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005fda:	462e      	mov	r6, r5
 8005fdc:	42b2      	cmp	r2, r6
 8005fde:	f101 0101 	add.w	r1, r1, #1
 8005fe2:	463d      	mov	r5, r7
 8005fe4:	d9ee      	bls.n	8005fc4 <__utoa+0x40>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	545a      	strb	r2, [r3, r1]
 8005fea:	1919      	adds	r1, r3, r4
 8005fec:	1aa5      	subs	r5, r4, r2
 8005fee:	42aa      	cmp	r2, r5
 8005ff0:	dae3      	bge.n	8005fba <__utoa+0x36>
 8005ff2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ff6:	780e      	ldrb	r6, [r1, #0]
 8005ff8:	7006      	strb	r6, [r0, #0]
 8005ffa:	3201      	adds	r2, #1
 8005ffc:	f801 5901 	strb.w	r5, [r1], #-1
 8006000:	e7f4      	b.n	8005fec <__utoa+0x68>
 8006002:	bf00      	nop
 8006004:	080072a0 	.word	0x080072a0

08006008 <memset>:
 8006008:	4402      	add	r2, r0
 800600a:	4603      	mov	r3, r0
 800600c:	4293      	cmp	r3, r2
 800600e:	d100      	bne.n	8006012 <memset+0xa>
 8006010:	4770      	bx	lr
 8006012:	f803 1b01 	strb.w	r1, [r3], #1
 8006016:	e7f9      	b.n	800600c <memset+0x4>

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	4d0d      	ldr	r5, [pc, #52]	@ (8006050 <__libc_init_array+0x38>)
 800601c:	4c0d      	ldr	r4, [pc, #52]	@ (8006054 <__libc_init_array+0x3c>)
 800601e:	1b64      	subs	r4, r4, r5
 8006020:	10a4      	asrs	r4, r4, #2
 8006022:	2600      	movs	r6, #0
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	4d0b      	ldr	r5, [pc, #44]	@ (8006058 <__libc_init_array+0x40>)
 800602a:	4c0c      	ldr	r4, [pc, #48]	@ (800605c <__libc_init_array+0x44>)
 800602c:	f000 f818 	bl	8006060 <_init>
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	2600      	movs	r6, #0
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	080072d0 	.word	0x080072d0
 8006054:	080072d0 	.word	0x080072d0
 8006058:	080072d0 	.word	0x080072d0
 800605c:	080072d4 	.word	0x080072d4

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
